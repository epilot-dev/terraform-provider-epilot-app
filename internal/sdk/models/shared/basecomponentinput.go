// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/internal/utils"
)

type SchemasCustomFlowActionComponentComponentType string

const (
	SchemasCustomFlowActionComponentComponentTypeCustomFlowAction SchemasCustomFlowActionComponentComponentType = "CUSTOM_FLOW_ACTION"
)

func (e SchemasCustomFlowActionComponentComponentType) ToPointer() *SchemasCustomFlowActionComponentComponentType {
	return &e
}
func (e *SchemasCustomFlowActionComponentComponentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CUSTOM_FLOW_ACTION":
		*e = SchemasCustomFlowActionComponentComponentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasCustomFlowActionComponentComponentType: %v", v)
	}
}

// SchemasDescription - Description of the component
type SchemasDescription struct {
	// German translation
	De string `json:"de"`
	// English translation
	En *string `json:"en,omitempty"`
}

func (o *SchemasDescription) GetDe() string {
	if o == nil {
		return ""
	}
	return o.De
}

func (o *SchemasDescription) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

// Name of the component
type Name struct {
	// German translation
	De string `json:"de"`
	// English translation
	En *string `json:"en,omitempty"`
}

func (o *Name) GetDe() string {
	if o == nil {
		return ""
	}
	return o.De
}

func (o *Name) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type CustomFlowActionComponentSchemas struct {
	ComponentType SchemasCustomFlowActionComponentComponentType `json:"component_type"`
	Configuration CustomFlowConfig                              `json:"configuration"`
	Description   *SchemasDescription                           `json:"description,omitempty"`
	// Unique identifier for the component
	ID   string `json:"id"`
	Name *Name  `json:"name,omitempty"`
	// List of options for the app component
	Options []Options `json:"options,omitempty"`
}

func (o *CustomFlowActionComponentSchemas) GetComponentType() SchemasCustomFlowActionComponentComponentType {
	if o == nil {
		return SchemasCustomFlowActionComponentComponentType("")
	}
	return o.ComponentType
}

func (o *CustomFlowActionComponentSchemas) GetConfiguration() CustomFlowConfig {
	if o == nil {
		return CustomFlowConfig{}
	}
	return o.Configuration
}

func (o *CustomFlowActionComponentSchemas) GetConfigurationExternalIntegration() *ExternalIntegrationCustomActionConfigSchemas {
	return o.GetConfiguration().ExternalIntegrationCustomActionConfigSchemas
}

func (o *CustomFlowActionComponentSchemas) GetDescription() *SchemasDescription {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CustomFlowActionComponentSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CustomFlowActionComponentSchemas) GetName() *Name {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CustomFlowActionComponentSchemas) GetOptions() []Options {
	if o == nil {
		return nil
	}
	return o.Options
}

type SchemasPortalExtensionComponentComponentType string

const (
	SchemasPortalExtensionComponentComponentTypePortalExtension SchemasPortalExtensionComponentComponentType = "PORTAL_EXTENSION"
)

func (e SchemasPortalExtensionComponentComponentType) ToPointer() *SchemasPortalExtensionComponentComponentType {
	return &e
}
func (e *SchemasPortalExtensionComponentComponentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PORTAL_EXTENSION":
		*e = SchemasPortalExtensionComponentComponentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasPortalExtensionComponentComponentType: %v", v)
	}
}

// SchemasPortalExtensionComponentDescription - Description of the component
type SchemasPortalExtensionComponentDescription struct {
	// German translation
	De string `json:"de"`
	// English translation
	En *string `json:"en,omitempty"`
}

func (o *SchemasPortalExtensionComponentDescription) GetDe() string {
	if o == nil {
		return ""
	}
	return o.De
}

func (o *SchemasPortalExtensionComponentDescription) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

// SchemasPortalExtensionComponentName - Name of the component
type SchemasPortalExtensionComponentName struct {
	// German translation
	De string `json:"de"`
	// English translation
	En *string `json:"en,omitempty"`
}

func (o *SchemasPortalExtensionComponentName) GetDe() string {
	if o == nil {
		return ""
	}
	return o.De
}

func (o *SchemasPortalExtensionComponentName) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type Origin string

const (
	OriginEndCustomerPortal Origin = "END_CUSTOMER_PORTAL"
	OriginInstallerPortal   Origin = "INSTALLER_PORTAL"
)

func (e Origin) ToPointer() *Origin {
	return &e
}
func (e *Origin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "END_CUSTOMER_PORTAL":
		fallthrough
	case "INSTALLER_PORTAL":
		*e = Origin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Origin: %v", v)
	}
}

type PortalExtensionComponentSchemas struct {
	ComponentType SchemasPortalExtensionComponentComponentType `json:"component_type"`
	Configuration PortalExtensionConfig                        `json:"configuration"`
	Description   *SchemasPortalExtensionComponentDescription  `json:"description,omitempty"`
	// Unique identifier for the component
	ID   string                               `json:"id"`
	Name *SchemasPortalExtensionComponentName `json:"name,omitempty"`
	// List of options for the app component
	Options []Options `json:"options,omitempty"`
	Origin  *Origin   `json:"origin,omitempty"`
}

func (o *PortalExtensionComponentSchemas) GetComponentType() SchemasPortalExtensionComponentComponentType {
	if o == nil {
		return SchemasPortalExtensionComponentComponentType("")
	}
	return o.ComponentType
}

func (o *PortalExtensionComponentSchemas) GetConfiguration() PortalExtensionConfig {
	if o == nil {
		return PortalExtensionConfig{}
	}
	return o.Configuration
}

func (o *PortalExtensionComponentSchemas) GetDescription() *SchemasPortalExtensionComponentDescription {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PortalExtensionComponentSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PortalExtensionComponentSchemas) GetName() *SchemasPortalExtensionComponentName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PortalExtensionComponentSchemas) GetOptions() []Options {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *PortalExtensionComponentSchemas) GetOrigin() *Origin {
	if o == nil {
		return nil
	}
	return o.Origin
}

type SchemasComponentType string

const (
	SchemasComponentTypeCustomJourneyBlock SchemasComponentType = "CUSTOM_JOURNEY_BLOCK"
)

func (e SchemasComponentType) ToPointer() *SchemasComponentType {
	return &e
}
func (e *SchemasComponentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CUSTOM_JOURNEY_BLOCK":
		*e = SchemasComponentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasComponentType: %v", v)
	}
}

// SchemasJourneyBlockComponentDescription - Description of the component
type SchemasJourneyBlockComponentDescription struct {
	// German translation
	De string `json:"de"`
	// English translation
	En *string `json:"en,omitempty"`
}

func (o *SchemasJourneyBlockComponentDescription) GetDe() string {
	if o == nil {
		return ""
	}
	return o.De
}

func (o *SchemasJourneyBlockComponentDescription) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

// SchemasName - Name of the component
type SchemasName struct {
	// German translation
	De string `json:"de"`
	// English translation
	En *string `json:"en,omitempty"`
}

func (o *SchemasName) GetDe() string {
	if o == nil {
		return ""
	}
	return o.De
}

func (o *SchemasName) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasInput struct {
	ComponentType SchemasComponentType                     `json:"component_type"`
	Configuration JourneyBlockConfigInput                  `json:"configuration"`
	Description   *SchemasJourneyBlockComponentDescription `json:"description,omitempty"`
	// Unique identifier for the component
	ID   string       `json:"id"`
	Name *SchemasName `json:"name,omitempty"`
	// List of options for the app component
	Options []Options `json:"options,omitempty"`
}

func (o *SchemasInput) GetComponentType() SchemasComponentType {
	if o == nil {
		return SchemasComponentType("")
	}
	return o.ComponentType
}

func (o *SchemasInput) GetConfiguration() JourneyBlockConfigInput {
	if o == nil {
		return JourneyBlockConfigInput{}
	}
	return o.Configuration
}

func (o *SchemasInput) GetDescription() *SchemasJourneyBlockComponentDescription {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *SchemasInput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SchemasInput) GetName() *SchemasName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *SchemasInput) GetOptions() []Options {
	if o == nil {
		return nil
	}
	return o.Options
}

type BaseComponentInputType string

const (
	BaseComponentInputTypeCustomFlowAction   BaseComponentInputType = "CUSTOM_FLOW_ACTION"
	BaseComponentInputTypeCustomJourneyBlock BaseComponentInputType = "CUSTOM_JOURNEY_BLOCK"
	BaseComponentInputTypePortalExtension    BaseComponentInputType = "PORTAL_EXTENSION"
)

type BaseComponentInput struct {
	SchemasInput                     *SchemasInput                     `queryParam:"inline"`
	PortalExtensionComponentSchemas  *PortalExtensionComponentSchemas  `queryParam:"inline"`
	CustomFlowActionComponentSchemas *CustomFlowActionComponentSchemas `queryParam:"inline"`

	Type BaseComponentInputType
}

func CreateBaseComponentInputCustomFlowAction(customFlowAction CustomFlowActionComponentSchemas) BaseComponentInput {
	typ := BaseComponentInputTypeCustomFlowAction

	typStr := SchemasCustomFlowActionComponentComponentType(typ)
	customFlowAction.ComponentType = typStr

	return BaseComponentInput{
		CustomFlowActionComponentSchemas: &customFlowAction,
		Type:                             typ,
	}
}

func CreateBaseComponentInputCustomJourneyBlock(customJourneyBlock SchemasInput) BaseComponentInput {
	typ := BaseComponentInputTypeCustomJourneyBlock

	typStr := SchemasComponentType(typ)
	customJourneyBlock.ComponentType = typStr

	return BaseComponentInput{
		SchemasInput: &customJourneyBlock,
		Type:         typ,
	}
}

func CreateBaseComponentInputPortalExtension(portalExtension PortalExtensionComponentSchemas) BaseComponentInput {
	typ := BaseComponentInputTypePortalExtension

	typStr := SchemasPortalExtensionComponentComponentType(typ)
	portalExtension.ComponentType = typStr

	return BaseComponentInput{
		PortalExtensionComponentSchemas: &portalExtension,
		Type:                            typ,
	}
}

func (u *BaseComponentInput) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		ComponentType string `json:"component_type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.ComponentType {
	case "CUSTOM_FLOW_ACTION":
		customFlowActionComponentSchemas := new(CustomFlowActionComponentSchemas)
		if err := utils.UnmarshalJSON(data, &customFlowActionComponentSchemas, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ComponentType == CUSTOM_FLOW_ACTION) type CustomFlowActionComponentSchemas within BaseComponentInput: %w", string(data), err)
		}

		u.CustomFlowActionComponentSchemas = customFlowActionComponentSchemas
		u.Type = BaseComponentInputTypeCustomFlowAction
		return nil
	case "CUSTOM_JOURNEY_BLOCK":
		schemasInput := new(SchemasInput)
		if err := utils.UnmarshalJSON(data, &schemasInput, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ComponentType == CUSTOM_JOURNEY_BLOCK) type SchemasInput within BaseComponentInput: %w", string(data), err)
		}

		u.SchemasInput = schemasInput
		u.Type = BaseComponentInputTypeCustomJourneyBlock
		return nil
	case "PORTAL_EXTENSION":
		portalExtensionComponentSchemas := new(PortalExtensionComponentSchemas)
		if err := utils.UnmarshalJSON(data, &portalExtensionComponentSchemas, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ComponentType == PORTAL_EXTENSION) type PortalExtensionComponentSchemas within BaseComponentInput: %w", string(data), err)
		}

		u.PortalExtensionComponentSchemas = portalExtensionComponentSchemas
		u.Type = BaseComponentInputTypePortalExtension
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BaseComponentInput", string(data))
}

func (u BaseComponentInput) MarshalJSON() ([]byte, error) {
	if u.SchemasInput != nil {
		return utils.MarshalJSON(u.SchemasInput, "", true)
	}

	if u.PortalExtensionComponentSchemas != nil {
		return utils.MarshalJSON(u.PortalExtensionComponentSchemas, "", true)
	}

	if u.CustomFlowActionComponentSchemas != nil {
		return utils.MarshalJSON(u.CustomFlowActionComponentSchemas, "", true)
	}

	return nil, errors.New("could not marshal union type BaseComponentInput: all fields are null")
}

type JourneyBlockComponentSchemas struct {
	ComponentType SchemasComponentType                     `json:"component_type"`
	Configuration JourneyBlockConfig                       `json:"configuration"`
	Description   *SchemasJourneyBlockComponentDescription `json:"description,omitempty"`
	// Unique identifier for the component
	ID   string       `json:"id"`
	Name *SchemasName `json:"name,omitempty"`
	// List of options for the app component
	Options []Options `json:"options,omitempty"`
}

func (o *JourneyBlockComponentSchemas) GetComponentType() SchemasComponentType {
	if o == nil {
		return SchemasComponentType("")
	}
	return o.ComponentType
}

func (o *JourneyBlockComponentSchemas) GetConfiguration() JourneyBlockConfig {
	if o == nil {
		return JourneyBlockConfig{}
	}
	return o.Configuration
}

func (o *JourneyBlockComponentSchemas) GetDescription() *SchemasJourneyBlockComponentDescription {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *JourneyBlockComponentSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *JourneyBlockComponentSchemas) GetName() *SchemasName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *JourneyBlockComponentSchemas) GetOptions() []Options {
	if o == nil {
		return nil
	}
	return o.Options
}

type BaseComponentType string

const (
	BaseComponentTypeCustomFlowAction   BaseComponentType = "CUSTOM_FLOW_ACTION"
	BaseComponentTypeCustomJourneyBlock BaseComponentType = "CUSTOM_JOURNEY_BLOCK"
	BaseComponentTypePortalExtension    BaseComponentType = "PORTAL_EXTENSION"
)

type BaseComponent struct {
	JourneyBlockComponentSchemas     *JourneyBlockComponentSchemas     `queryParam:"inline"`
	PortalExtensionComponentSchemas  *PortalExtensionComponentSchemas  `queryParam:"inline"`
	CustomFlowActionComponentSchemas *CustomFlowActionComponentSchemas `queryParam:"inline"`

	Type BaseComponentType
}

func CreateBaseComponentCustomFlowAction(customFlowAction CustomFlowActionComponentSchemas) BaseComponent {
	typ := BaseComponentTypeCustomFlowAction

	typStr := SchemasCustomFlowActionComponentComponentType(typ)
	customFlowAction.ComponentType = typStr

	return BaseComponent{
		CustomFlowActionComponentSchemas: &customFlowAction,
		Type:                             typ,
	}
}

func CreateBaseComponentCustomJourneyBlock(customJourneyBlock JourneyBlockComponentSchemas) BaseComponent {
	typ := BaseComponentTypeCustomJourneyBlock

	typStr := SchemasComponentType(typ)
	customJourneyBlock.ComponentType = typStr

	return BaseComponent{
		JourneyBlockComponentSchemas: &customJourneyBlock,
		Type:                         typ,
	}
}

func CreateBaseComponentPortalExtension(portalExtension PortalExtensionComponentSchemas) BaseComponent {
	typ := BaseComponentTypePortalExtension

	typStr := SchemasPortalExtensionComponentComponentType(typ)
	portalExtension.ComponentType = typStr

	return BaseComponent{
		PortalExtensionComponentSchemas: &portalExtension,
		Type:                            typ,
	}
}

func (u *BaseComponent) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		ComponentType string `json:"component_type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.ComponentType {
	case "CUSTOM_FLOW_ACTION":
		customFlowActionComponentSchemas := new(CustomFlowActionComponentSchemas)
		if err := utils.UnmarshalJSON(data, &customFlowActionComponentSchemas, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ComponentType == CUSTOM_FLOW_ACTION) type CustomFlowActionComponentSchemas within BaseComponent: %w", string(data), err)
		}

		u.CustomFlowActionComponentSchemas = customFlowActionComponentSchemas
		u.Type = BaseComponentTypeCustomFlowAction
		return nil
	case "CUSTOM_JOURNEY_BLOCK":
		journeyBlockComponentSchemas := new(JourneyBlockComponentSchemas)
		if err := utils.UnmarshalJSON(data, &journeyBlockComponentSchemas, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ComponentType == CUSTOM_JOURNEY_BLOCK) type JourneyBlockComponentSchemas within BaseComponent: %w", string(data), err)
		}

		u.JourneyBlockComponentSchemas = journeyBlockComponentSchemas
		u.Type = BaseComponentTypeCustomJourneyBlock
		return nil
	case "PORTAL_EXTENSION":
		portalExtensionComponentSchemas := new(PortalExtensionComponentSchemas)
		if err := utils.UnmarshalJSON(data, &portalExtensionComponentSchemas, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ComponentType == PORTAL_EXTENSION) type PortalExtensionComponentSchemas within BaseComponent: %w", string(data), err)
		}

		u.PortalExtensionComponentSchemas = portalExtensionComponentSchemas
		u.Type = BaseComponentTypePortalExtension
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BaseComponent", string(data))
}

func (u BaseComponent) MarshalJSON() ([]byte, error) {
	if u.JourneyBlockComponentSchemas != nil {
		return utils.MarshalJSON(u.JourneyBlockComponentSchemas, "", true)
	}

	if u.PortalExtensionComponentSchemas != nil {
		return utils.MarshalJSON(u.PortalExtensionComponentSchemas, "", true)
	}

	if u.CustomFlowActionComponentSchemas != nil {
		return utils.MarshalJSON(u.CustomFlowActionComponentSchemas, "", true)
	}

	return nil, errors.New("could not marshal union type BaseComponent: all fields are null")
}
