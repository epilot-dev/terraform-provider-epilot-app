// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-app/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AppDataSourceModel) RefreshFromSharedInstallation(ctx context.Context, resp *shared.Installation) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Manifest = make([]types.String, 0, len(resp.Manifest))
		for _, v := range resp.Manifest {
			r.Manifest = append(r.Manifest, types.StringValue(v))
		}
		r.AppID = types.StringValue(resp.AppID)
		if resp.BlueprintRef == nil {
			r.BlueprintRef = nil
		} else {
			r.BlueprintRef = &tfTypes.BlueprintRef{}
			r.BlueprintRef.JobID = types.StringPointerValue(resp.BlueprintRef.JobID)
			r.BlueprintRef.ManifestID = types.StringPointerValue(resp.BlueprintRef.ManifestID)
		}
		componentsResult, _ := json.Marshal(resp.Components)
		r.Components = jsontypes.NewNormalizedValue(string(componentsResult))
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		if resp.InstallationAudit == nil {
			r.InstallationAudit = nil
		} else {
			r.InstallationAudit = &tfTypes.InstallationAudit{}
			r.InstallationAudit.CreatedAt = types.StringPointerValue(resp.InstallationAudit.CreatedAt)
			r.InstallationAudit.CreatedBy = types.StringPointerValue(resp.InstallationAudit.CreatedBy)
			r.InstallationAudit.UpdatedAt = types.StringPointerValue(resp.InstallationAudit.UpdatedAt)
			r.InstallationAudit.UpdatedBy = types.StringPointerValue(resp.InstallationAudit.UpdatedBy)
		}
		r.InstalledVersion = types.StringValue(resp.InstalledVersion)
		r.InstallerOrgID = types.StringValue(resp.InstallerOrgID)
		r.Name = types.StringValue(resp.Name)
		r.OptionValues = []tfTypes.OptionsRef{}

		for _, optionValuesItem := range resp.OptionValues {
			var optionValues tfTypes.OptionsRef

			optionValues.ComponentID = types.StringValue(optionValuesItem.ComponentID)
			optionValues.Options = []tfTypes.Option{}

			for _, optionsVarItem := range optionValuesItem.Options {
				var optionsVar tfTypes.Option

				optionsVar.Key = types.StringValue(optionsVarItem.Key)
				if optionsVarItem.Value.Str != nil {
					optionsVar.Value.Str = types.StringPointerValue(optionsVarItem.Value.Str)
				}
				if optionsVarItem.Value.Boolean != nil {
					optionsVar.Value.Boolean = types.BoolPointerValue(optionsVarItem.Value.Boolean)
				}
				if optionsVarItem.Value.Number != nil {
					optionsVar.Value.Number = types.Float64PointerValue(optionsVarItem.Value.Number)
				}

				optionValues.Options = append(optionValues.Options, optionsVar)
			}

			r.OptionValues = append(r.OptionValues, optionValues)
		}
		r.OwnerOrgID = types.StringPointerValue(resp.OwnerOrgID)
		r.Role = types.StringPointerValue(resp.Role)
	}

	return diags
}

func (r *AppDataSourceModel) ToOperationsGetInstallationRequest(ctx context.Context) (*operations.GetInstallationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var appID string
	appID = r.AppID.ValueString()

	out := operations.GetInstallationRequest{
		AppID: appID,
	}

	return &out, diags
}
