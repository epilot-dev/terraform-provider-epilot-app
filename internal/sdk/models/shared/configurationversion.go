// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/internal/utils"
)

// ConfigurationVersionReviewStatus - Status of the review process
type ConfigurationVersionReviewStatus string

const (
	ConfigurationVersionReviewStatusApproved ConfigurationVersionReviewStatus = "approved"
	ConfigurationVersionReviewStatusRejected ConfigurationVersionReviewStatus = "rejected"
	ConfigurationVersionReviewStatusPending  ConfigurationVersionReviewStatus = "pending"
)

func (e ConfigurationVersionReviewStatus) ToPointer() *ConfigurationVersionReviewStatus {
	return &e
}
func (e *ConfigurationVersionReviewStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved":
		fallthrough
	case "rejected":
		fallthrough
	case "pending":
		*e = ConfigurationVersionReviewStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigurationVersionReviewStatus: %v", v)
	}
}

type ConfigurationVersionVersionAudit struct {
	// Timestamp of the creation
	CreatedAt *string `json:"created_at,omitempty"`
	// User ID of the creator
	CreatedBy *string `json:"created_by,omitempty"`
	// Timestamp of the last update
	UpdatedAt *string `json:"updated_at,omitempty"`
	// User ID of the last updater
	UpdatedBy *string `json:"updated_by,omitempty"`
	// Timestamp of the last version update
	VersionedAt *string `json:"versioned_at,omitempty"`
	// User ID of the user who last updated the app
	VersionedBy *string `json:"versioned_by,omitempty"`
}

func (o *ConfigurationVersionVersionAudit) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ConfigurationVersionVersionAudit) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *ConfigurationVersionVersionAudit) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ConfigurationVersionVersionAudit) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *ConfigurationVersionVersionAudit) GetVersionedAt() *string {
	if o == nil {
		return nil
	}
	return o.VersionedAt
}

func (o *ConfigurationVersionVersionAudit) GetVersionedBy() *string {
	if o == nil {
		return nil
	}
	return o.VersionedBy
}

// ConfigurationVersion - Configuration data about your app which is versionable
type ConfigurationVersion struct {
	AppID string `json:"app_id"`
	// Changelog for the app version
	Changelog  *string         `json:"changelog,omitempty"`
	Components []BaseComponent `json:"components"`
	// Timestamp when the app version is deprecated
	DeprecatedAt *string `json:"deprecated_at,omitempty"`
	// Flag to indicate if the app is in beta.
	IsBeta *bool `json:"is_beta,omitempty"`
	// Organization ID of the app owner
	OwnerOrgID string `json:"owner_org_id"`
	// Flag to indicate if the app is pending for verification
	Pending *bool `default:"false" json:"pending"`
	// Flag to indicate if the app is public.
	Public *bool `default:"true" json:"public"`
	// Status of the review process
	ReviewStatus *ConfigurationVersionReviewStatus `json:"review_status,omitempty"`
	Role         *Role                             `json:"role,omitempty"`
	// Version of the app that is installed
	Version      string                           `json:"version"`
	VersionAudit ConfigurationVersionVersionAudit `json:"version_audit"`
}

func (c ConfigurationVersion) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConfigurationVersion) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConfigurationVersion) GetAppID() string {
	if o == nil {
		return ""
	}
	return o.AppID
}

func (o *ConfigurationVersion) GetChangelog() *string {
	if o == nil {
		return nil
	}
	return o.Changelog
}

func (o *ConfigurationVersion) GetComponents() []BaseComponent {
	if o == nil {
		return []BaseComponent{}
	}
	return o.Components
}

func (o *ConfigurationVersion) GetDeprecatedAt() *string {
	if o == nil {
		return nil
	}
	return o.DeprecatedAt
}

func (o *ConfigurationVersion) GetIsBeta() *bool {
	if o == nil {
		return nil
	}
	return o.IsBeta
}

func (o *ConfigurationVersion) GetOwnerOrgID() string {
	if o == nil {
		return ""
	}
	return o.OwnerOrgID
}

func (o *ConfigurationVersion) GetPending() *bool {
	if o == nil {
		return nil
	}
	return o.Pending
}

func (o *ConfigurationVersion) GetPublic() *bool {
	if o == nil {
		return nil
	}
	return o.Public
}

func (o *ConfigurationVersion) GetReviewStatus() *ConfigurationVersionReviewStatus {
	if o == nil {
		return nil
	}
	return o.ReviewStatus
}

func (o *ConfigurationVersion) GetRole() *Role {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *ConfigurationVersion) GetVersion() string {
	if o == nil {
		return ""
	}
	return o.Version
}

func (o *ConfigurationVersion) GetVersionAudit() ConfigurationVersionVersionAudit {
	if o == nil {
		return ConfigurationVersionVersionAudit{}
	}
	return o.VersionAudit
}
