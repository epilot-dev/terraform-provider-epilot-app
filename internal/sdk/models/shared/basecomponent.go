// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/internal/utils"
)

type SchemasComponentType string

const (
	SchemasComponentTypePortalExtension SchemasComponentType = "PORTAL_EXTENSION"
)

func (e SchemasComponentType) ToPointer() *SchemasComponentType {
	return &e
}
func (e *SchemasComponentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PORTAL_EXTENSION":
		*e = SchemasComponentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasComponentType: %v", v)
	}
}

type Origin string

const (
	OriginEndCustomerPortal Origin = "END_CUSTOMER_PORTAL"
	OriginInstallerPortal   Origin = "INSTALLER_PORTAL"
)

func (e Origin) ToPointer() *Origin {
	return &e
}
func (e *Origin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "END_CUSTOMER_PORTAL":
		fallthrough
	case "INSTALLER_PORTAL":
		*e = Origin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Origin: %v", v)
	}
}

type PortalExtensionComponentSchemas struct {
	ComponentType SchemasComponentType  `json:"component_type"`
	Configuration PortalExtensionConfig `json:"configuration"`
	// Unique identifier for the component
	ID   string            `json:"id"`
	Name *TranslatedString `json:"name,omitempty"`
	// List of options for the app component
	Options []Options `json:"options,omitempty"`
	Origin  *Origin   `json:"origin,omitempty"`
}

func (o *PortalExtensionComponentSchemas) GetComponentType() SchemasComponentType {
	if o == nil {
		return SchemasComponentType("")
	}
	return o.ComponentType
}

func (o *PortalExtensionComponentSchemas) GetConfiguration() PortalExtensionConfig {
	if o == nil {
		return PortalExtensionConfig{}
	}
	return o.Configuration
}

func (o *PortalExtensionComponentSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PortalExtensionComponentSchemas) GetName() *TranslatedString {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PortalExtensionComponentSchemas) GetOptions() []Options {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *PortalExtensionComponentSchemas) GetOrigin() *Origin {
	if o == nil {
		return nil
	}
	return o.Origin
}

type SchemasJourneyBlockComponentComponentType string

const (
	SchemasJourneyBlockComponentComponentTypeCustomJourneyBlock SchemasJourneyBlockComponentComponentType = "CUSTOM_JOURNEY_BLOCK"
)

func (e SchemasJourneyBlockComponentComponentType) ToPointer() *SchemasJourneyBlockComponentComponentType {
	return &e
}
func (e *SchemasJourneyBlockComponentComponentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CUSTOM_JOURNEY_BLOCK":
		*e = SchemasJourneyBlockComponentComponentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasJourneyBlockComponentComponentType: %v", v)
	}
}

type Schemas struct {
	ComponentType SchemasJourneyBlockComponentComponentType `json:"component_type"`
	Configuration JourneyBlockConfig                        `json:"configuration"`
	// Unique identifier for the component
	ID   string            `json:"id"`
	Name *TranslatedString `json:"name,omitempty"`
	// List of options for the app component
	Options []Options `json:"options,omitempty"`
}

func (o *Schemas) GetComponentType() SchemasJourneyBlockComponentComponentType {
	if o == nil {
		return SchemasJourneyBlockComponentComponentType("")
	}
	return o.ComponentType
}

func (o *Schemas) GetConfiguration() JourneyBlockConfig {
	if o == nil {
		return JourneyBlockConfig{}
	}
	return o.Configuration
}

func (o *Schemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Schemas) GetName() *TranslatedString {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Schemas) GetOptions() []Options {
	if o == nil {
		return nil
	}
	return o.Options
}

type BaseComponentType string

const (
	BaseComponentTypeCustomJourneyBlock BaseComponentType = "CUSTOM_JOURNEY_BLOCK"
	BaseComponentTypePortalExtension    BaseComponentType = "PORTAL_EXTENSION"
)

type BaseComponent struct {
	Schemas                         *Schemas                         `queryParam:"inline"`
	PortalExtensionComponentSchemas *PortalExtensionComponentSchemas `queryParam:"inline"`

	Type BaseComponentType
}

func CreateBaseComponentCustomJourneyBlock(customJourneyBlock Schemas) BaseComponent {
	typ := BaseComponentTypeCustomJourneyBlock

	typStr := SchemasJourneyBlockComponentComponentType(typ)
	customJourneyBlock.ComponentType = typStr

	return BaseComponent{
		Schemas: &customJourneyBlock,
		Type:    typ,
	}
}

func CreateBaseComponentPortalExtension(portalExtension PortalExtensionComponentSchemas) BaseComponent {
	typ := BaseComponentTypePortalExtension

	typStr := SchemasComponentType(typ)
	portalExtension.ComponentType = typStr

	return BaseComponent{
		PortalExtensionComponentSchemas: &portalExtension,
		Type:                            typ,
	}
}

func (u *BaseComponent) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		ComponentType string `json:"component_type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.ComponentType {
	case "CUSTOM_JOURNEY_BLOCK":
		schemas := new(Schemas)
		if err := utils.UnmarshalJSON(data, &schemas, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ComponentType == CUSTOM_JOURNEY_BLOCK) type Schemas within BaseComponent: %w", string(data), err)
		}

		u.Schemas = schemas
		u.Type = BaseComponentTypeCustomJourneyBlock
		return nil
	case "PORTAL_EXTENSION":
		portalExtensionComponentSchemas := new(PortalExtensionComponentSchemas)
		if err := utils.UnmarshalJSON(data, &portalExtensionComponentSchemas, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ComponentType == PORTAL_EXTENSION) type PortalExtensionComponentSchemas within BaseComponent: %w", string(data), err)
		}

		u.PortalExtensionComponentSchemas = portalExtensionComponentSchemas
		u.Type = BaseComponentTypePortalExtension
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BaseComponent", string(data))
}

func (u BaseComponent) MarshalJSON() ([]byte, error) {
	if u.Schemas != nil {
		return utils.MarshalJSON(u.Schemas, "", true)
	}

	if u.PortalExtensionComponentSchemas != nil {
		return utils.MarshalJSON(u.PortalExtensionComponentSchemas, "", true)
	}

	return nil, errors.New("could not marshal union type BaseComponent: all fields are null")
}
