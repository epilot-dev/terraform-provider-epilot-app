// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PricingType string

const (
	PricingTypeFree         PricingType = "FREE"
	PricingTypeSubscription PricingType = "SUBSCRIPTION"
	PricingTypeUsageBased   PricingType = "USAGE_BASED"
	PricingTypeOneTime      PricingType = "ONE_TIME"
	PricingTypeCustom       PricingType = "CUSTOM"
	PricingTypeUnknown      PricingType = "UNKNOWN"
)

func (e PricingType) ToPointer() *PricingType {
	return &e
}
func (e *PricingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "USAGE_BASED":
		fallthrough
	case "ONE_TIME":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "UNKNOWN":
		*e = PricingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PricingType: %v", v)
	}
}

type Pricing struct {
	// How often the subscription is billed
	BillingFrequency *BillingFrequency `json:"billing_frequency,omitempty"`
	PricingType      *PricingType      `json:"pricing_type,omitempty"`
}

func (o *Pricing) GetBillingFrequency() *BillingFrequency {
	if o == nil {
		return nil
	}
	return o.BillingFrequency
}

func (o *Pricing) GetPricingType() *PricingType {
	if o == nil {
		return nil
	}
	return o.PricingType
}
