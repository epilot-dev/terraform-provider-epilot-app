// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/internal/utils"
)

type ExternalIntegrationSettings struct {
	Headers map[string]any `json:"headers,omitempty"`
	// URL to call
	URL *string `json:"url,omitempty"`
}

func (o *ExternalIntegrationSettings) GetHeaders() map[string]any {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ExternalIntegrationSettings) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type SchemasExternalIntegrationCustomActionConfigType string

const (
	SchemasExternalIntegrationCustomActionConfigTypeExternalIntegration SchemasExternalIntegrationCustomActionConfigType = "external_integration"
)

func (e SchemasExternalIntegrationCustomActionConfigType) ToPointer() *SchemasExternalIntegrationCustomActionConfigType {
	return &e
}
func (e *SchemasExternalIntegrationCustomActionConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "external_integration":
		*e = SchemasExternalIntegrationCustomActionConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasExternalIntegrationCustomActionConfigType: %v", v)
	}
}

type ExternalIntegrationCustomActionConfigSchemas struct {
	// Description of the custom action
	Description                 *string                      `json:"description,omitempty"`
	ExternalIntegrationSettings *ExternalIntegrationSettings `json:"external_integration_settings,omitempty"`
	// Name of the custom action
	Name *string                                          `json:"name,omitempty"`
	Type SchemasExternalIntegrationCustomActionConfigType `json:"type"`
}

func (o *ExternalIntegrationCustomActionConfigSchemas) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ExternalIntegrationCustomActionConfigSchemas) GetExternalIntegrationSettings() *ExternalIntegrationSettings {
	if o == nil {
		return nil
	}
	return o.ExternalIntegrationSettings
}

func (o *ExternalIntegrationCustomActionConfigSchemas) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ExternalIntegrationCustomActionConfigSchemas) GetType() SchemasExternalIntegrationCustomActionConfigType {
	if o == nil {
		return SchemasExternalIntegrationCustomActionConfigType("")
	}
	return o.Type
}

type CustomFlowConfigType string

const (
	CustomFlowConfigTypeExternalIntegration CustomFlowConfigType = "external_integration"
)

type CustomFlowConfig struct {
	ExternalIntegrationCustomActionConfigSchemas *ExternalIntegrationCustomActionConfigSchemas `queryParam:"inline"`

	Type CustomFlowConfigType
}

func CreateCustomFlowConfigExternalIntegration(externalIntegration ExternalIntegrationCustomActionConfigSchemas) CustomFlowConfig {
	typ := CustomFlowConfigTypeExternalIntegration

	typStr := SchemasExternalIntegrationCustomActionConfigType(typ)
	externalIntegration.Type = typStr

	return CustomFlowConfig{
		ExternalIntegrationCustomActionConfigSchemas: &externalIntegration,
		Type: typ,
	}
}

func (u *CustomFlowConfig) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "external_integration":
		externalIntegrationCustomActionConfigSchemas := new(ExternalIntegrationCustomActionConfigSchemas)
		if err := utils.UnmarshalJSON(data, &externalIntegrationCustomActionConfigSchemas, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == external_integration) type ExternalIntegrationCustomActionConfigSchemas within CustomFlowConfig: %w", string(data), err)
		}

		u.ExternalIntegrationCustomActionConfigSchemas = externalIntegrationCustomActionConfigSchemas
		u.Type = CustomFlowConfigTypeExternalIntegration
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomFlowConfig", string(data))
}

func (u CustomFlowConfig) MarshalJSON() ([]byte, error) {
	if u.ExternalIntegrationCustomActionConfigSchemas != nil {
		return utils.MarshalJSON(u.ExternalIntegrationCustomActionConfigSchemas, "", true)
	}

	return nil, errors.New("could not marshal union type CustomFlowConfig: all fields are null")
}
