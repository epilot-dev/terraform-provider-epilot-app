// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/models/shared"
	"net/http"
)

type IngestEventRequestBodyType string

const (
	IngestEventRequestBodyTypeAppEventDataInput IngestEventRequestBodyType = "AppEventData_input"
	IngestEventRequestBodyTypeBatchEventRequest IngestEventRequestBodyType = "BatchEventRequest"
)

type IngestEventRequestBody struct {
	AppEventDataInput *shared.AppEventDataInput `queryParam:"inline" name:"requestBody"`
	BatchEventRequest *shared.BatchEventRequest `queryParam:"inline" name:"requestBody"`

	Type IngestEventRequestBodyType
}

func CreateIngestEventRequestBodyAppEventDataInput(appEventDataInput shared.AppEventDataInput) IngestEventRequestBody {
	typ := IngestEventRequestBodyTypeAppEventDataInput

	return IngestEventRequestBody{
		AppEventDataInput: &appEventDataInput,
		Type:              typ,
	}
}

func CreateIngestEventRequestBodyBatchEventRequest(batchEventRequest shared.BatchEventRequest) IngestEventRequestBody {
	typ := IngestEventRequestBodyTypeBatchEventRequest

	return IngestEventRequestBody{
		BatchEventRequest: &batchEventRequest,
		Type:              typ,
	}
}

func (u *IngestEventRequestBody) UnmarshalJSON(data []byte) error {

	var appEventDataInput shared.AppEventDataInput = shared.AppEventDataInput{}
	if err := utils.UnmarshalJSON(data, &appEventDataInput, "", true, nil); err == nil {
		u.AppEventDataInput = &appEventDataInput
		u.Type = IngestEventRequestBodyTypeAppEventDataInput
		return nil
	}

	var batchEventRequest shared.BatchEventRequest = shared.BatchEventRequest{}
	if err := utils.UnmarshalJSON(data, &batchEventRequest, "", true, nil); err == nil {
		u.BatchEventRequest = &batchEventRequest
		u.Type = IngestEventRequestBodyTypeBatchEventRequest
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for IngestEventRequestBody", string(data))
}

func (u IngestEventRequestBody) MarshalJSON() ([]byte, error) {
	if u.AppEventDataInput != nil {
		return utils.MarshalJSON(u.AppEventDataInput, "", true)
	}

	if u.BatchEventRequest != nil {
		return utils.MarshalJSON(u.BatchEventRequest, "", true)
	}

	return nil, errors.New("could not marshal union type IngestEventRequestBody: all fields are null")
}

type IngestEventResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *IngestEventResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *IngestEventResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *IngestEventResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
