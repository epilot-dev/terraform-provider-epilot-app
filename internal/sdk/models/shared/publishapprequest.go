// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PublishAppRequestAccessLevel string

const (
	PublishAppRequestAccessLevelPublic  PublishAppRequestAccessLevel = "public"
	PublishAppRequestAccessLevelPrivate PublishAppRequestAccessLevel = "private"
)

func (e PublishAppRequestAccessLevel) ToPointer() *PublishAppRequestAccessLevel {
	return &e
}
func (e *PublishAppRequestAccessLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "public":
		fallthrough
	case "private":
		*e = PublishAppRequestAccessLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublishAppRequestAccessLevel: %v", v)
	}
}

type Metadata struct {
	AccessLevel *PublishAppRequestAccessLevel `json:"access_level,omitempty"`
}

func (o *Metadata) GetAccessLevel() *PublishAppRequestAccessLevel {
	if o == nil {
		return nil
	}
	return o.AccessLevel
}

type PublishAppRequest struct {
	Metadata    *Metadata   `json:"metadata,omitempty"`
	S3Reference S3Reference `json:"s3_reference"`
}

func (o *PublishAppRequest) GetMetadata() *Metadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *PublishAppRequest) GetS3Reference() S3Reference {
	if o == nil {
		return S3Reference{}
	}
	return o.S3Reference
}
