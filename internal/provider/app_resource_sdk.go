// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-app/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
)

func (r *AppResourceModel) ToSharedInstallRequest() *shared.InstallRequest {
	var optionValues []shared.OptionsRef = []shared.OptionsRef{}
	for _, optionValuesItem := range r.OptionValues {
		var componentID string
		componentID = optionValuesItem.ComponentID.ValueString()

		var optionsVar []shared.Option = []shared.Option{}
		for _, optionsItem := range optionValuesItem.Options {
			var key string
			key = optionsItem.Key.ValueString()

			var value string
			value = optionsItem.Value.ValueString()

			optionsVar = append(optionsVar, shared.Option{
				Key:   key,
				Value: value,
			})
		}
		optionValues = append(optionValues, shared.OptionsRef{
			ComponentID: componentID,
			Options:     optionsVar,
		})
	}
	out := shared.InstallRequest{
		OptionValues: optionValues,
	}
	return &out
}

func (r *AppResourceModel) RefreshFromOperationsInstallResponseBody(resp *operations.InstallResponseBody) {
	if resp != nil {
		r.OptionValues = []tfTypes.OptionsRef{}
		if len(r.OptionValues) > len(resp.OptionValues) {
			r.OptionValues = r.OptionValues[:len(resp.OptionValues)]
		}
		for optionValuesCount, optionValuesItem := range resp.OptionValues {
			var optionValues1 tfTypes.OptionsRef
			optionValues1.ComponentID = types.StringValue(optionValuesItem.ComponentID)
			optionValues1.Options = []tfTypes.Option{}
			for optionsVarCount, optionsVarItem := range optionValuesItem.Options {
				var optionsVar1 tfTypes.Option
				optionsVar1.Key = types.StringValue(optionsVarItem.Key)
				optionsVar1.Value = types.StringValue(optionsVarItem.Value)
				if optionsVarCount+1 > len(optionValues1.Options) {
					optionValues1.Options = append(optionValues1.Options, optionsVar1)
				} else {
					optionValues1.Options[optionsVarCount].Key = optionsVar1.Key
					optionValues1.Options[optionsVarCount].Value = optionsVar1.Value
				}
			}
			if optionValuesCount+1 > len(r.OptionValues) {
				r.OptionValues = append(r.OptionValues, optionValues1)
			} else {
				r.OptionValues[optionValuesCount].ComponentID = optionValues1.ComponentID
				r.OptionValues[optionValuesCount].Options = optionValues1.Options
			}
		}
	}
}

func (r *AppResourceModel) RefreshFromSharedInstallation(resp *shared.Installation) {
	if resp != nil {
		r.AppID = types.StringValue(resp.AppID)
		r.Components = []tfTypes.BaseComponent{}
		if len(r.Components) > len(resp.Components) {
			r.Components = r.Components[:len(resp.Components)]
		}
		for componentsCount, componentsItem := range resp.Components {
			var components1 tfTypes.BaseComponent
			if componentsItem.JourneyBlockComponentSchemas != nil {
				components1.CustomJourneyBlock = &tfTypes.JourneyBlockComponentSchemas{}
				components1.CustomJourneyBlock.ComponentType = types.StringValue(string(componentsItem.JourneyBlockComponentSchemas.ComponentType))
				components1.CustomJourneyBlock.Configuration.ComponentArgs = []tfTypes.JourneyBlockComponentArgs{}
				for componentArgsCount, componentArgsItem := range componentsItem.JourneyBlockComponentSchemas.Configuration.ComponentArgs {
					var componentArgs1 tfTypes.JourneyBlockComponentArgs
					if componentArgsItem.TextArgSchemas != nil {
						componentArgs1.Text = &tfTypes.TextArgSchemas{}
						if componentArgsItem.TextArgSchemas.Description == nil {
							componentArgs1.Text.Description = nil
						} else {
							componentArgs1.Text.Description = &tfTypes.SchemasTextArgDescription{}
							componentArgs1.Text.Description.De = types.StringValue(componentArgsItem.TextArgSchemas.Description.De)
							componentArgs1.Text.Description.En = types.StringPointerValue(componentArgsItem.TextArgSchemas.Description.En)
						}
						componentArgs1.Text.Key = types.StringValue(componentArgsItem.TextArgSchemas.Key)
						componentArgs1.Text.Label.De = types.StringValue(componentArgsItem.TextArgSchemas.Label.De)
						componentArgs1.Text.Label.En = types.StringPointerValue(componentArgsItem.TextArgSchemas.Label.En)
						componentArgs1.Text.Required = types.BoolPointerValue(componentArgsItem.TextArgSchemas.Required)
						componentArgs1.Text.Type = types.StringValue(string(componentArgsItem.TextArgSchemas.Type))
					}
					if componentArgsItem.Schemas != nil {
						componentArgs1.Boolean = &tfTypes.TextArgSchemas{}
						if componentArgsItem.Schemas.Description == nil {
							componentArgs1.Boolean.Description = nil
						} else {
							componentArgs1.Boolean.Description = &tfTypes.SchemasTextArgDescription{}
							componentArgs1.Boolean.Description.De = types.StringValue(componentArgsItem.Schemas.Description.De)
							componentArgs1.Boolean.Description.En = types.StringPointerValue(componentArgsItem.Schemas.Description.En)
						}
						componentArgs1.Boolean.Key = types.StringValue(componentArgsItem.Schemas.Key)
						componentArgs1.Boolean.Label.De = types.StringValue(componentArgsItem.Schemas.Label.De)
						componentArgs1.Boolean.Label.En = types.StringPointerValue(componentArgsItem.Schemas.Label.En)
						componentArgs1.Boolean.Required = types.BoolPointerValue(componentArgsItem.Schemas.Required)
						componentArgs1.Boolean.Type = types.StringValue(string(componentArgsItem.Schemas.Type))
					}
					if componentArgsItem.EnumArgSchemas != nil {
						componentArgs1.Enum = &tfTypes.EnumArgSchemas{}
						if componentArgsItem.EnumArgSchemas.Description == nil {
							componentArgs1.Enum.Description = nil
						} else {
							componentArgs1.Enum.Description = &tfTypes.SchemasTextArgDescription{}
							componentArgs1.Enum.Description.De = types.StringValue(componentArgsItem.EnumArgSchemas.Description.De)
							componentArgs1.Enum.Description.En = types.StringPointerValue(componentArgsItem.EnumArgSchemas.Description.En)
						}
						componentArgs1.Enum.IsMulti = types.BoolPointerValue(componentArgsItem.EnumArgSchemas.IsMulti)
						componentArgs1.Enum.Key = types.StringValue(componentArgsItem.EnumArgSchemas.Key)
						componentArgs1.Enum.Label.De = types.StringValue(componentArgsItem.EnumArgSchemas.Label.De)
						componentArgs1.Enum.Label.En = types.StringPointerValue(componentArgsItem.EnumArgSchemas.Label.En)
						componentArgs1.Enum.Options = []tfTypes.SchemasOptions{}
						for optionsVarCount, optionsVarItem := range componentArgsItem.EnumArgSchemas.Options {
							var optionsVar1 tfTypes.SchemasOptions
							optionsVar1.ID = types.StringValue(optionsVarItem.ID)
							optionsVar1.Label.De = types.StringValue(optionsVarItem.Label.De)
							optionsVar1.Label.En = types.StringPointerValue(optionsVarItem.Label.En)
							if optionsVarCount+1 > len(componentArgs1.Enum.Options) {
								componentArgs1.Enum.Options = append(componentArgs1.Enum.Options, optionsVar1)
							} else {
								componentArgs1.Enum.Options[optionsVarCount].ID = optionsVar1.ID
								componentArgs1.Enum.Options[optionsVarCount].Label = optionsVar1.Label
							}
						}
						componentArgs1.Enum.Required = types.BoolPointerValue(componentArgsItem.EnumArgSchemas.Required)
						componentArgs1.Enum.Type = types.StringValue(string(componentArgsItem.EnumArgSchemas.Type))
					}
					if componentArgsCount+1 > len(components1.CustomJourneyBlock.Configuration.ComponentArgs) {
						components1.CustomJourneyBlock.Configuration.ComponentArgs = append(components1.CustomJourneyBlock.Configuration.ComponentArgs, componentArgs1)
					} else {
						components1.CustomJourneyBlock.Configuration.ComponentArgs[componentArgsCount].Text = componentArgs1.Text
						components1.CustomJourneyBlock.Configuration.ComponentArgs[componentArgsCount].Boolean = componentArgs1.Boolean
						components1.CustomJourneyBlock.Configuration.ComponentArgs[componentArgsCount].Enum = componentArgs1.Enum
					}
				}
				if componentsItem.JourneyBlockComponentSchemas.Configuration.ComponentSize != nil {
					components1.CustomJourneyBlock.Configuration.ComponentSize = types.NumberValue(big.NewFloat(float64(*componentsItem.JourneyBlockComponentSchemas.Configuration.ComponentSize)))
				} else {
					components1.CustomJourneyBlock.Configuration.ComponentSize = types.NumberNull()
				}
				components1.CustomJourneyBlock.Configuration.ComponentTag = types.StringValue(componentsItem.JourneyBlockComponentSchemas.Configuration.ComponentTag)
				components1.CustomJourneyBlock.Configuration.ComponentURL = types.StringValue(componentsItem.JourneyBlockComponentSchemas.Configuration.ComponentURL)
				if componentsItem.JourneyBlockComponentSchemas.Description == nil {
					components1.CustomJourneyBlock.Description = nil
				} else {
					components1.CustomJourneyBlock.Description = &tfTypes.SchemasTextArgDescription{}
					components1.CustomJourneyBlock.Description.De = types.StringValue(componentsItem.JourneyBlockComponentSchemas.Description.De)
					components1.CustomJourneyBlock.Description.En = types.StringPointerValue(componentsItem.JourneyBlockComponentSchemas.Description.En)
				}
				components1.CustomJourneyBlock.ID = types.StringValue(componentsItem.JourneyBlockComponentSchemas.ID)
				if componentsItem.JourneyBlockComponentSchemas.Name == nil {
					components1.CustomJourneyBlock.Name = nil
				} else {
					components1.CustomJourneyBlock.Name = &tfTypes.SchemasTextArgDescription{}
					components1.CustomJourneyBlock.Name.De = types.StringValue(componentsItem.JourneyBlockComponentSchemas.Name.De)
					components1.CustomJourneyBlock.Name.En = types.StringPointerValue(componentsItem.JourneyBlockComponentSchemas.Name.En)
				}
				components1.CustomJourneyBlock.Options = []tfTypes.Options{}
				for optionsVarCount1, optionsVarItem1 := range componentsItem.JourneyBlockComponentSchemas.Options {
					var optionsVar2 tfTypes.Options
					optionsVar2.Description = types.StringPointerValue(optionsVarItem1.Description)
					optionsVar2.Key = types.StringValue(optionsVarItem1.Key)
					optionsVar2.Label = types.StringPointerValue(optionsVarItem1.Label)
					optionsVar2.Required = types.BoolPointerValue(optionsVarItem1.Required)
					optionsVar2.Type = types.StringValue(string(optionsVarItem1.Type))
					optionsVar2.Value = types.StringPointerValue(optionsVarItem1.Value)
					if optionsVarCount1+1 > len(components1.CustomJourneyBlock.Options) {
						components1.CustomJourneyBlock.Options = append(components1.CustomJourneyBlock.Options, optionsVar2)
					} else {
						components1.CustomJourneyBlock.Options[optionsVarCount1].Description = optionsVar2.Description
						components1.CustomJourneyBlock.Options[optionsVarCount1].Key = optionsVar2.Key
						components1.CustomJourneyBlock.Options[optionsVarCount1].Label = optionsVar2.Label
						components1.CustomJourneyBlock.Options[optionsVarCount1].Required = optionsVar2.Required
						components1.CustomJourneyBlock.Options[optionsVarCount1].Type = optionsVar2.Type
						components1.CustomJourneyBlock.Options[optionsVarCount1].Value = optionsVar2.Value
					}
				}
			}
			if componentsItem.PortalExtensionComponentSchemas != nil {
				components1.PortalExtension = &tfTypes.PortalExtensionComponentSchemas{}
				components1.PortalExtension.ComponentType = types.StringValue(string(componentsItem.PortalExtensionComponentSchemas.ComponentType))
				components1.PortalExtension.Configuration.Hooks = []tfTypes.Hooks{}
				for hooksCount, hooksItem := range componentsItem.PortalExtensionComponentSchemas.Configuration.Hooks {
					var hooks1 tfTypes.Hooks
					if hooksItem.Auth == nil {
						hooks1.Auth = nil
					} else {
						hooks1.Auth = &tfTypes.PortalAuth{}
						if len(hooksItem.Auth.Headers) > 0 {
							hooks1.Auth.Headers = make(map[string]types.String)
							for key4, value1 := range hooksItem.Auth.Headers {
								hooks1.Auth.Headers[key4] = types.StringValue(value1)
							}
						}
						hooks1.Auth.Method = types.StringPointerValue(hooksItem.Auth.Method)
						hooks1.Auth.Type = types.StringPointerValue(hooksItem.Auth.Type)
						hooks1.Auth.URL = types.StringPointerValue(hooksItem.Auth.URL)
					}
					if hooksItem.Call == nil {
						hooks1.Call = nil
					} else {
						hooks1.Call = &tfTypes.Call{}
						if len(hooksItem.Call.Headers) > 0 {
							hooks1.Call.Headers = make(map[string]types.String)
							for key5, value2 := range hooksItem.Call.Headers {
								hooks1.Call.Headers[key5] = types.StringValue(value2)
							}
						}
						if len(hooksItem.Call.Params) > 0 {
							hooks1.Call.Params = make(map[string]types.String)
							for key6, value3 := range hooksItem.Call.Params {
								hooks1.Call.Params[key6] = types.StringValue(value3)
							}
						}
						hooks1.Call.URL = types.StringPointerValue(hooksItem.Call.URL)
					}
					hooks1.ID = types.StringPointerValue(hooksItem.ID)
					hooks1.Interval = []types.String{}
					for _, v := range hooksItem.Interval {
						hooks1.Interval = append(hooks1.Interval, types.StringValue(v))
					}
					if hooksItem.Name == nil {
						hooks1.Name = nil
					} else {
						hooks1.Name = &tfTypes.SchemasTextArgDescription{}
						hooks1.Name.De = types.StringValue(hooksItem.Name.De)
						hooks1.Name.En = types.StringPointerValue(hooksItem.Name.En)
					}
					hooks1.Type = types.StringPointerValue(hooksItem.Type)
					if hooksCount+1 > len(components1.PortalExtension.Configuration.Hooks) {
						components1.PortalExtension.Configuration.Hooks = append(components1.PortalExtension.Configuration.Hooks, hooks1)
					} else {
						components1.PortalExtension.Configuration.Hooks[hooksCount].Auth = hooks1.Auth
						components1.PortalExtension.Configuration.Hooks[hooksCount].Call = hooks1.Call
						components1.PortalExtension.Configuration.Hooks[hooksCount].ID = hooks1.ID
						components1.PortalExtension.Configuration.Hooks[hooksCount].Interval = hooks1.Interval
						components1.PortalExtension.Configuration.Hooks[hooksCount].Name = hooks1.Name
						components1.PortalExtension.Configuration.Hooks[hooksCount].Type = hooks1.Type
					}
				}
				components1.PortalExtension.Configuration.ID = types.StringPointerValue(componentsItem.PortalExtensionComponentSchemas.Configuration.ID)
				components1.PortalExtension.Configuration.Links = []tfTypes.Links{}
				for linksCount, linksItem := range componentsItem.PortalExtensionComponentSchemas.Configuration.Links {
					var links1 tfTypes.Links
					if linksItem.Auth == nil {
						links1.Auth = nil
					} else {
						links1.Auth = &tfTypes.PortalAuth{}
						if len(linksItem.Auth.Headers) > 0 {
							links1.Auth.Headers = make(map[string]types.String)
							for key7, value4 := range linksItem.Auth.Headers {
								links1.Auth.Headers[key7] = types.StringValue(value4)
							}
						}
						links1.Auth.Method = types.StringPointerValue(linksItem.Auth.Method)
						links1.Auth.Type = types.StringPointerValue(linksItem.Auth.Type)
						links1.Auth.URL = types.StringPointerValue(linksItem.Auth.URL)
					}
					links1.Condition = types.StringPointerValue(linksItem.Condition)
					if linksItem.Description == nil {
						links1.Description = nil
					} else {
						links1.Description = &tfTypes.SchemasTextArgDescription{}
						links1.Description.De = types.StringValue(linksItem.Description.De)
						links1.Description.En = types.StringPointerValue(linksItem.Description.En)
					}
					links1.ID = types.StringPointerValue(linksItem.ID)
					if linksItem.Name == nil {
						links1.Name = nil
					} else {
						links1.Name = &tfTypes.SchemasTextArgDescription{}
						links1.Name.De = types.StringValue(linksItem.Name.De)
						links1.Name.En = types.StringPointerValue(linksItem.Name.En)
					}
					if linksItem.Redirect == nil {
						links1.Redirect = nil
					} else {
						links1.Redirect = &tfTypes.Redirect{}
						if len(linksItem.Redirect.Params) > 0 {
							links1.Redirect.Params = make(map[string]types.String)
							for key8, value5 := range linksItem.Redirect.Params {
								links1.Redirect.Params[key8] = types.StringValue(value5)
							}
						}
						links1.Redirect.URL = types.StringPointerValue(linksItem.Redirect.URL)
					}
					links1.Type = types.StringPointerValue(linksItem.Type)
					if linksCount+1 > len(components1.PortalExtension.Configuration.Links) {
						components1.PortalExtension.Configuration.Links = append(components1.PortalExtension.Configuration.Links, links1)
					} else {
						components1.PortalExtension.Configuration.Links[linksCount].Auth = links1.Auth
						components1.PortalExtension.Configuration.Links[linksCount].Condition = links1.Condition
						components1.PortalExtension.Configuration.Links[linksCount].Description = links1.Description
						components1.PortalExtension.Configuration.Links[linksCount].ID = links1.ID
						components1.PortalExtension.Configuration.Links[linksCount].Name = links1.Name
						components1.PortalExtension.Configuration.Links[linksCount].Redirect = links1.Redirect
						components1.PortalExtension.Configuration.Links[linksCount].Type = links1.Type
					}
				}
				if componentsItem.PortalExtensionComponentSchemas.Description == nil {
					components1.PortalExtension.Description = nil
				} else {
					components1.PortalExtension.Description = &tfTypes.SchemasTextArgDescription{}
					components1.PortalExtension.Description.De = types.StringValue(componentsItem.PortalExtensionComponentSchemas.Description.De)
					components1.PortalExtension.Description.En = types.StringPointerValue(componentsItem.PortalExtensionComponentSchemas.Description.En)
				}
				components1.PortalExtension.ID = types.StringValue(componentsItem.PortalExtensionComponentSchemas.ID)
				if componentsItem.PortalExtensionComponentSchemas.Name == nil {
					components1.PortalExtension.Name = nil
				} else {
					components1.PortalExtension.Name = &tfTypes.SchemasTextArgDescription{}
					components1.PortalExtension.Name.De = types.StringValue(componentsItem.PortalExtensionComponentSchemas.Name.De)
					components1.PortalExtension.Name.En = types.StringPointerValue(componentsItem.PortalExtensionComponentSchemas.Name.En)
				}
				components1.PortalExtension.Options = []tfTypes.Options{}
				for optionsVarCount2, optionsVarItem2 := range componentsItem.PortalExtensionComponentSchemas.Options {
					var optionsVar3 tfTypes.Options
					optionsVar3.Description = types.StringPointerValue(optionsVarItem2.Description)
					optionsVar3.Key = types.StringValue(optionsVarItem2.Key)
					optionsVar3.Label = types.StringPointerValue(optionsVarItem2.Label)
					optionsVar3.Required = types.BoolPointerValue(optionsVarItem2.Required)
					optionsVar3.Type = types.StringValue(string(optionsVarItem2.Type))
					optionsVar3.Value = types.StringPointerValue(optionsVarItem2.Value)
					if optionsVarCount2+1 > len(components1.PortalExtension.Options) {
						components1.PortalExtension.Options = append(components1.PortalExtension.Options, optionsVar3)
					} else {
						components1.PortalExtension.Options[optionsVarCount2].Description = optionsVar3.Description
						components1.PortalExtension.Options[optionsVarCount2].Key = optionsVar3.Key
						components1.PortalExtension.Options[optionsVarCount2].Label = optionsVar3.Label
						components1.PortalExtension.Options[optionsVarCount2].Required = optionsVar3.Required
						components1.PortalExtension.Options[optionsVarCount2].Type = optionsVar3.Type
						components1.PortalExtension.Options[optionsVarCount2].Value = optionsVar3.Value
					}
				}
				if componentsItem.PortalExtensionComponentSchemas.Origin != nil {
					components1.PortalExtension.Origin = types.StringValue(string(*componentsItem.PortalExtensionComponentSchemas.Origin))
				} else {
					components1.PortalExtension.Origin = types.StringNull()
				}
			}
			if componentsCount+1 > len(r.Components) {
				r.Components = append(r.Components, components1)
			} else {
				r.Components[componentsCount].CustomJourneyBlock = components1.CustomJourneyBlock
				r.Components[componentsCount].PortalExtension = components1.PortalExtension
			}
		}
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		if resp.InstallationAudit == nil {
			r.InstallationAudit = nil
		} else {
			r.InstallationAudit = &tfTypes.InstallationAudit{}
			r.InstallationAudit.CreatedAt = types.StringPointerValue(resp.InstallationAudit.CreatedAt)
			r.InstallationAudit.CreatedBy = types.StringPointerValue(resp.InstallationAudit.CreatedBy)
			r.InstallationAudit.UpdatedAt = types.StringPointerValue(resp.InstallationAudit.UpdatedAt)
			r.InstallationAudit.UpdatedBy = types.StringPointerValue(resp.InstallationAudit.UpdatedBy)
		}
		r.InstalledVersion = types.StringValue(resp.InstalledVersion)
		r.InstallerOrgID = types.StringValue(resp.InstallerOrgID)
		r.Name = types.StringValue(resp.Name)
		r.OptionValues = []tfTypes.OptionsRef{}
		if len(r.OptionValues) > len(resp.OptionValues) {
			r.OptionValues = r.OptionValues[:len(resp.OptionValues)]
		}
		for optionValuesCount, optionValuesItem := range resp.OptionValues {
			var optionValues1 tfTypes.OptionsRef
			optionValues1.ComponentID = types.StringValue(optionValuesItem.ComponentID)
			optionValues1.Options = []tfTypes.Option{}
			for optionsVarCount3, optionsVarItem3 := range optionValuesItem.Options {
				var optionsVar4 tfTypes.Option
				optionsVar4.Key = types.StringValue(optionsVarItem3.Key)
				optionsVar4.Value = types.StringValue(optionsVarItem3.Value)
				if optionsVarCount3+1 > len(optionValues1.Options) {
					optionValues1.Options = append(optionValues1.Options, optionsVar4)
				} else {
					optionValues1.Options[optionsVarCount3].Key = optionsVar4.Key
					optionValues1.Options[optionsVarCount3].Value = optionsVar4.Value
				}
			}
			if optionValuesCount+1 > len(r.OptionValues) {
				r.OptionValues = append(r.OptionValues, optionValues1)
			} else {
				r.OptionValues[optionValuesCount].ComponentID = optionValues1.ComponentID
				r.OptionValues[optionValuesCount].Options = optionValues1.Options
			}
		}
	}
}
