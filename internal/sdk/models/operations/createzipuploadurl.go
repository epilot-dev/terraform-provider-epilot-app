// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/models/shared"
	"net/http"
	"time"
)

type CreateZipUploadURLRequestBody struct {
	Filename *string `json:"filename,omitempty"`
}

func (o *CreateZipUploadURLRequestBody) GetFilename() *string {
	if o == nil {
		return nil
	}
	return o.Filename
}

type CreateZipUploadURLRequest struct {
	RequestBody *CreateZipUploadURLRequestBody `request:"mediaType=application/json"`
	// ID of the app configuration
	AppID string `pathParam:"style=simple,explode=false,name=appId"`
}

func (o *CreateZipUploadURLRequest) GetRequestBody() *CreateZipUploadURLRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *CreateZipUploadURLRequest) GetAppID() string {
	if o == nil {
		return ""
	}
	return o.AppID
}

// CreateZipUploadURLResponseBody - Upload URL generated successfully
type CreateZipUploadURLResponseBody struct {
	// Public CDN URL for the unpacked artifacts
	ArtifactURL string `json:"artifact_url"`
	// Timestamp when the upload URL expires
	ExpiresAt *time.Time          `json:"expires_at,omitempty"`
	S3ref     *shared.S3Reference `json:"s3ref,omitempty"`
	// Presigned S3 URL for uploading the bundle
	UploadURL string `json:"upload_url"`
}

func (c CreateZipUploadURLResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateZipUploadURLResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateZipUploadURLResponseBody) GetArtifactURL() string {
	if o == nil {
		return ""
	}
	return o.ArtifactURL
}

func (o *CreateZipUploadURLResponseBody) GetExpiresAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreateZipUploadURLResponseBody) GetS3ref() *shared.S3Reference {
	if o == nil {
		return nil
	}
	return o.S3ref
}

func (o *CreateZipUploadURLResponseBody) GetUploadURL() string {
	if o == nil {
		return ""
	}
	return o.UploadURL
}

type CreateZipUploadURLResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Upload URL generated successfully
	Object *CreateZipUploadURLResponseBody
}

func (o *CreateZipUploadURLResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateZipUploadURLResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateZipUploadURLResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateZipUploadURLResponse) GetObject() *CreateZipUploadURLResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
