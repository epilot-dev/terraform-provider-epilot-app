// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type OptionsType string

const (
	OptionsTypeText    OptionsType = "text"
	OptionsTypeNumber  OptionsType = "number"
	OptionsTypeBoolean OptionsType = "boolean"
	OptionsTypeSecret  OptionsType = "secret"
)

func (e OptionsType) ToPointer() *OptionsType {
	return &e
}
func (e *OptionsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		fallthrough
	case "number":
		fallthrough
	case "boolean":
		fallthrough
	case "secret":
		*e = OptionsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OptionsType: %v", v)
	}
}

// Options for the component configuration
type Options struct {
	// Detailed description of what this configuration option does
	Description *string `json:"description,omitempty"`
	// Unique identifier for this configuration option
	Key string `json:"key"`
	// Human-readable label for the configuration option
	Label *string `json:"label,omitempty"`
	// Flag to indicate if this option is required
	Required *bool       `json:"required,omitempty"`
	Type     OptionsType `json:"type"`
	// The configured value for this option. Is only present when the component is installed.
	Value *string `json:"value,omitempty"`
}

func (o *Options) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Options) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *Options) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *Options) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *Options) GetType() OptionsType {
	if o == nil {
		return OptionsType("")
	}
	return o.Type
}

func (o *Options) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}
