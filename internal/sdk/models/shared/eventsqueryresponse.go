// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/internal/utils"
)

type EventsQueryResponsePagination struct {
	HasNext    *bool  `json:"has_next,omitempty"`
	Page       *int64 `json:"page,omitempty"`
	PageSize   *int64 `json:"page_size,omitempty"`
	TotalItems *int64 `json:"total_items,omitempty"`
}

func (o *EventsQueryResponsePagination) GetHasNext() *bool {
	if o == nil {
		return nil
	}
	return o.HasNext
}

func (o *EventsQueryResponsePagination) GetPage() *int64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *EventsQueryResponsePagination) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *EventsQueryResponsePagination) GetTotalItems() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalItems
}

type ResultsType string

const (
	ResultsTypeRawEvents        ResultsType = "RawEvents"
	ResultsTypeAggregatedEvents ResultsType = "AggregatedEvents"
)

type Results struct {
	RawEvents        *RawEvents        `queryParam:"inline" name:"results"`
	AggregatedEvents *AggregatedEvents `queryParam:"inline" name:"results"`

	Type ResultsType
}

func CreateResultsRawEvents(rawEvents RawEvents) Results {
	typ := ResultsTypeRawEvents

	return Results{
		RawEvents: &rawEvents,
		Type:      typ,
	}
}

func CreateResultsAggregatedEvents(aggregatedEvents AggregatedEvents) Results {
	typ := ResultsTypeAggregatedEvents

	return Results{
		AggregatedEvents: &aggregatedEvents,
		Type:             typ,
	}
}

func (u *Results) UnmarshalJSON(data []byte) error {

	var rawEvents RawEvents = RawEvents{}
	if err := utils.UnmarshalJSON(data, &rawEvents, "", true, nil); err == nil {
		u.RawEvents = &rawEvents
		u.Type = ResultsTypeRawEvents
		return nil
	}

	var aggregatedEvents AggregatedEvents = AggregatedEvents{}
	if err := utils.UnmarshalJSON(data, &aggregatedEvents, "", true, nil); err == nil {
		u.AggregatedEvents = &aggregatedEvents
		u.Type = ResultsTypeAggregatedEvents
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Results", string(data))
}

func (u Results) MarshalJSON() ([]byte, error) {
	if u.RawEvents != nil {
		return utils.MarshalJSON(u.RawEvents, "", true)
	}

	if u.AggregatedEvents != nil {
		return utils.MarshalJSON(u.AggregatedEvents, "", true)
	}

	return nil, errors.New("could not marshal union type Results: all fields are null")
}

type EventsQueryResponse struct {
	Pagination *EventsQueryResponsePagination `json:"pagination,omitempty"`
	Query      *EventsQuery                   `json:"query,omitempty"`
	Results    *Results                       `json:"results,omitempty"`
}

func (o *EventsQueryResponse) GetPagination() *EventsQueryResponsePagination {
	if o == nil {
		return nil
	}
	return o.Pagination
}

func (o *EventsQueryResponse) GetQuery() *EventsQuery {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *EventsQueryResponse) GetResults() *Results {
	if o == nil {
		return nil
	}
	return o.Results
}
