// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-app/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AppDataSource{}
var _ datasource.DataSourceWithConfigure = &AppDataSource{}

func NewAppDataSource() datasource.DataSource {
	return &AppDataSource{}
}

// AppDataSource is the data source implementation.
type AppDataSource struct {
	client *sdk.SDK
}

// AppDataSourceModel describes the data model.
type AppDataSourceModel struct {
	AppID             types.String               `tfsdk:"app_id"`
	BlueprintRef      *tfTypes.BlueprintRef      `tfsdk:"blueprint_ref"`
	Components        types.String               `tfsdk:"components"`
	Enabled           types.Bool                 `tfsdk:"enabled"`
	InstallationAudit *tfTypes.InstallationAudit `tfsdk:"installation_audit"`
	InstalledVersion  types.String               `tfsdk:"installed_version"`
	InstallerOrgID    types.String               `tfsdk:"installer_org_id"`
	Manifest          []types.String             `tfsdk:"manifest"`
	Name              types.String               `tfsdk:"name"`
	OptionValues      []tfTypes.OptionsRef       `tfsdk:"option_values"`
	OwnerOrgID        types.String               `tfsdk:"owner_org_id"`
	Role              types.String               `tfsdk:"role"`
}

// Metadata returns the data source type name.
func (r *AppDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_app"
}

// Schema defines the schema for the data source.
func (r *AppDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "App DataSource",

		Attributes: map[string]schema.Attribute{
			"app_id": schema.StringAttribute{
				Required: true,
			},
			"blueprint_ref": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"job_id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the job that created the blueprint`,
					},
					"manifest_id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the blueprint`,
					},
				},
			},
			"components": schema.StringAttribute{
				Computed:    true,
				Description: `List of component configurations for the installed version. Parsed as JSON.`,
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Description: `Flag to indicate if the app is enabled. Enabled is set to true when required option values are set.`,
			},
			"installation_audit": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"created_at": schema.StringAttribute{
						Computed:    true,
						Description: `Timestamp of the creation`,
					},
					"created_by": schema.StringAttribute{
						Computed:    true,
						Description: `User ID of the creator`,
					},
					"updated_at": schema.StringAttribute{
						Computed:    true,
						Description: `Timestamp of the last update`,
					},
					"updated_by": schema.StringAttribute{
						Computed:    true,
						Description: `User ID of the last updater`,
					},
				},
				Description: `Audit information for the app`,
			},
			"installed_version": schema.StringAttribute{
				Computed:    true,
				Description: `Version of the app that is installed`,
			},
			"installer_org_id": schema.StringAttribute{
				Computed:    true,
				Description: `Unique identifier for the organization the app is installed in`,
			},
			"manifest": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Manifest ID used to create/update the entity`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `Name of the app`,
			},
			"option_values": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"component_id": schema.StringAttribute{
							Computed:    true,
							Description: `ID of the component these values are for`,
						},
						"options": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"key": schema.StringAttribute{
										Computed:    true,
										Description: `Key matching a config_option from the component`,
									},
									"value": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"boolean": schema.BoolAttribute{
												Computed: true,
											},
											"number": schema.NumberAttribute{
												Computed: true,
											},
											"str": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `The configured value for this option`,
									},
								},
							},
						},
					},
				},
				Description: `Configuration values for the app components`,
			},
			"owner_org_id": schema.StringAttribute{
				Computed:    true,
				Description: `Organization ID of the app creator`,
			},
			"role": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the role the app can use to access APIs`,
			},
		},
	}
}

func (r *AppDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AppDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AppDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var appID string
	appID = data.AppID.ValueString()

	request := operations.GetInstallationRequest{
		AppID: appID,
	}
	res, err := r.client.AppInstallation.GetInstallation(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Installation != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedInstallation(res.Installation)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
