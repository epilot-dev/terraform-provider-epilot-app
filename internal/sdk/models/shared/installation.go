// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/internal/utils"
)

// InstallationAudit - Audit information for the app
type InstallationAudit struct {
	// Timestamp of the creation
	CreatedAt *string `json:"created_at,omitempty"`
	// User ID of the creator
	CreatedBy *string `json:"created_by,omitempty"`
	// Timestamp of the last update
	UpdatedAt *string `json:"updated_at,omitempty"`
	// User ID of the last updater
	UpdatedBy *string `json:"updated_by,omitempty"`
}

func (o *InstallationAudit) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *InstallationAudit) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *InstallationAudit) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *InstallationAudit) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

// Installation - Information about the installed app. Has configuration data of the installed version
type Installation struct {
	// Manifest ID used to create/update the entity
	Manifest []string `json:"_manifest,omitempty"`
	// ID of the app configuration
	AppID        string        `json:"app_id"`
	BlueprintRef *BlueprintRef `json:"blueprint_ref,omitempty"`
	// List of component configurations for the installed version
	Components any `json:"components"`
	// Flag to indicate if the app is enabled. Enabled is set to true when required option values are set.
	Enabled           *bool              `default:"true" json:"enabled"`
	InstallationAudit *InstallationAudit `json:"installation_audit,omitempty"`
	// Version of the app that is installed
	InstalledVersion string `json:"installed_version"`
	// Unique identifier for the organization the app is installed in
	InstallerOrgID string `json:"installer_org_id"`
	// Name of the app
	Name string `json:"name"`
	// Configuration values for the app components
	OptionValues []OptionsRef `json:"option_values,omitempty"`
	// Organization ID of the app creator
	OwnerOrgID *string `json:"owner_org_id,omitempty"`
	// The name of the role the app can use to access APIs
	Role *string `json:"role,omitempty"`
}

func (i Installation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *Installation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Installation) GetManifest() []string {
	if o == nil {
		return nil
	}
	return o.Manifest
}

func (o *Installation) GetAppID() string {
	if o == nil {
		return ""
	}
	return o.AppID
}

func (o *Installation) GetBlueprintRef() *BlueprintRef {
	if o == nil {
		return nil
	}
	return o.BlueprintRef
}

func (o *Installation) GetComponents() any {
	if o == nil {
		return nil
	}
	return o.Components
}

func (o *Installation) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *Installation) GetInstallationAudit() *InstallationAudit {
	if o == nil {
		return nil
	}
	return o.InstallationAudit
}

func (o *Installation) GetInstalledVersion() string {
	if o == nil {
		return ""
	}
	return o.InstalledVersion
}

func (o *Installation) GetInstallerOrgID() string {
	if o == nil {
		return ""
	}
	return o.InstallerOrgID
}

func (o *Installation) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Installation) GetOptionValues() []OptionsRef {
	if o == nil {
		return nil
	}
	return o.OptionValues
}

func (o *Installation) GetOwnerOrgID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerOrgID
}

func (o *Installation) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}
