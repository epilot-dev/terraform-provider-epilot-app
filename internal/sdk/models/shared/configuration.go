// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/internal/utils"
)

// ConfigurationAudit - Audit information for the app
type ConfigurationAudit struct {
	// Timestamp of the creation
	CreatedAt *string `json:"created_at,omitempty"`
	// User ID of the creator
	CreatedBy *string `json:"created_by,omitempty"`
	// Timestamp of the last update
	UpdatedAt *string `json:"updated_at,omitempty"`
	// User ID of the last updater
	UpdatedBy *string `json:"updated_by,omitempty"`
}

func (o *ConfigurationAudit) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ConfigurationAudit) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *ConfigurationAudit) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ConfigurationAudit) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

// ConfigurationDescription - Markdown description of the app.
type ConfigurationDescription struct {
	// German translation
	De string `json:"de"`
	// English translation
	En *string `json:"en,omitempty"`
}

func (o *ConfigurationDescription) GetDe() string {
	if o == nil {
		return ""
	}
	return o.De
}

func (o *ConfigurationDescription) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

// Notifications - Configuration for developer notifications
type Notifications struct {
	// Email address to receive notifications
	Email *string `json:"email,omitempty"`
	// List of events to subscribe to
	Events []NotificationEvent `json:"events,omitempty"`
}

func (o *Notifications) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *Notifications) GetEvents() []NotificationEvent {
	if o == nil {
		return nil
	}
	return o.Events
}

type ConfigurationPricingType string

const (
	ConfigurationPricingTypeFree         ConfigurationPricingType = "FREE"
	ConfigurationPricingTypeSubscription ConfigurationPricingType = "SUBSCRIPTION"
	ConfigurationPricingTypeUsageBased   ConfigurationPricingType = "USAGE_BASED"
	ConfigurationPricingTypeOneTime      ConfigurationPricingType = "ONE_TIME"
	ConfigurationPricingTypeCustom       ConfigurationPricingType = "CUSTOM"
	ConfigurationPricingTypeUnknown      ConfigurationPricingType = "UNKNOWN"
)

func (e ConfigurationPricingType) ToPointer() *ConfigurationPricingType {
	return &e
}
func (e *ConfigurationPricingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "USAGE_BASED":
		fallthrough
	case "ONE_TIME":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "UNKNOWN":
		*e = ConfigurationPricingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigurationPricingType: %v", v)
	}
}

// ConfigurationPricing - Pricing information for the app
type ConfigurationPricing struct {
	// How often the subscription is billed
	BillingFrequency *BillingFrequency         `json:"billing_frequency,omitempty"`
	PricingType      *ConfigurationPricingType `json:"pricing_type,omitempty"`
}

func (o *ConfigurationPricing) GetBillingFrequency() *BillingFrequency {
	if o == nil {
		return nil
	}
	return o.BillingFrequency
}

func (o *ConfigurationPricing) GetPricingType() *ConfigurationPricingType {
	if o == nil {
		return nil
	}
	return o.PricingType
}

// ReviewStatus - Status of the review process
type ReviewStatus string

const (
	ReviewStatusApproved ReviewStatus = "approved"
	ReviewStatusRejected ReviewStatus = "rejected"
	ReviewStatusPending  ReviewStatus = "pending"
)

func (e ReviewStatus) ToPointer() *ReviewStatus {
	return &e
}
func (e *ReviewStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved":
		fallthrough
	case "rejected":
		fallthrough
	case "pending":
		*e = ReviewStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReviewStatus: %v", v)
	}
}

type VersionAudit struct {
	// Timestamp of the creation
	CreatedAt *string `json:"created_at,omitempty"`
	// User ID of the creator
	CreatedBy *string `json:"created_by,omitempty"`
	// Timestamp of the last update
	UpdatedAt *string `json:"updated_at,omitempty"`
	// User ID of the last updater
	UpdatedBy *string `json:"updated_by,omitempty"`
	// Timestamp of the last version update
	VersionedAt *string `json:"versioned_at,omitempty"`
	// User ID of the user who last updated the app
	VersionedBy *string `json:"versioned_by,omitempty"`
}

func (o *VersionAudit) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *VersionAudit) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *VersionAudit) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *VersionAudit) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *VersionAudit) GetVersionedAt() *string {
	if o == nil {
		return nil
	}
	return o.VersionedAt
}

func (o *VersionAudit) GetVersionedBy() *string {
	if o == nil {
		return nil
	}
	return o.VersionedBy
}

// Configuration of the published app
type Configuration struct {
	AppID        string        `json:"app_id"`
	Author       *Author       `json:"author,omitempty"`
	BlueprintRef *BlueprintRef `json:"blueprint_ref,omitempty"`
	// Category of the app.
	Category *string `json:"category,omitempty"`
	// Changelog for the app version
	Changelog          *string             `json:"changelog,omitempty"`
	Components         []BaseComponent     `json:"components"`
	ConfigurationAudit *ConfigurationAudit `json:"configuration_audit,omitempty"`
	// Timestamp when the app version is deprecated
	DeprecatedAt *string                  `json:"deprecated_at,omitempty"`
	Description  ConfigurationDescription `json:"description"`
	// Flag to indicate if the app is in dev mode. If true, the app takes the override_url property of components into account.
	DevMode *bool `json:"dev_mode,omitempty"`
	// URL of the app documentation.
	DocumentationURL *string `json:"documentation_url,omitempty"`
	// URL of the app icon.
	IconURL *string `json:"icon_url,omitempty"`
	// Flag to indicate if the app is built by epilot.
	Internal *bool `default:"false" json:"internal"`
	// Flag to indicate if the app is in beta.
	IsBeta *bool `json:"is_beta,omitempty"`
	// Latest version of the app
	LatestVersion string `json:"latest_version"`
	// Name of the app
	Name          string         `json:"name"`
	Notifications *Notifications `json:"notifications,omitempty"`
	// Organization ID of the app owner
	OwnerOrgID string `json:"owner_org_id"`
	// Flag to indicate if the app is pending for verification
	Pending *bool                 `default:"false" json:"pending"`
	Pricing *ConfigurationPricing `json:"pricing,omitempty"`
	// Flag to indicate if the app is public.
	Public *bool `default:"true" json:"public"`
	// List of available public versions of the app
	PublicVersions []string `json:"public_versions,omitempty"`
	// Status of the review process
	ReviewStatus *ReviewStatus `json:"review_status,omitempty"`
	Role         *Role         `json:"role,omitempty"`
	// Email address for support requests
	SupportEmail *string `json:"support_email,omitempty"`
	// Version of the app that is installed
	Version      string       `json:"version"`
	VersionAudit VersionAudit `json:"version_audit"`
	// List of available versions of the app
	Versions []string `json:"versions"`
}

func (c Configuration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Configuration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"app_id", "components", "description", "latest_version", "name", "owner_org_id", "version", "version_audit", "versions"}); err != nil {
		return err
	}
	return nil
}

func (o *Configuration) GetAppID() string {
	if o == nil {
		return ""
	}
	return o.AppID
}

func (o *Configuration) GetAuthor() *Author {
	if o == nil {
		return nil
	}
	return o.Author
}

func (o *Configuration) GetBlueprintRef() *BlueprintRef {
	if o == nil {
		return nil
	}
	return o.BlueprintRef
}

func (o *Configuration) GetCategory() *string {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *Configuration) GetChangelog() *string {
	if o == nil {
		return nil
	}
	return o.Changelog
}

func (o *Configuration) GetComponents() []BaseComponent {
	if o == nil {
		return []BaseComponent{}
	}
	return o.Components
}

func (o *Configuration) GetConfigurationAudit() *ConfigurationAudit {
	if o == nil {
		return nil
	}
	return o.ConfigurationAudit
}

func (o *Configuration) GetDeprecatedAt() *string {
	if o == nil {
		return nil
	}
	return o.DeprecatedAt
}

func (o *Configuration) GetDescription() ConfigurationDescription {
	if o == nil {
		return ConfigurationDescription{}
	}
	return o.Description
}

func (o *Configuration) GetDevMode() *bool {
	if o == nil {
		return nil
	}
	return o.DevMode
}

func (o *Configuration) GetDocumentationURL() *string {
	if o == nil {
		return nil
	}
	return o.DocumentationURL
}

func (o *Configuration) GetIconURL() *string {
	if o == nil {
		return nil
	}
	return o.IconURL
}

func (o *Configuration) GetInternal() *bool {
	if o == nil {
		return nil
	}
	return o.Internal
}

func (o *Configuration) GetIsBeta() *bool {
	if o == nil {
		return nil
	}
	return o.IsBeta
}

func (o *Configuration) GetLatestVersion() string {
	if o == nil {
		return ""
	}
	return o.LatestVersion
}

func (o *Configuration) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Configuration) GetNotifications() *Notifications {
	if o == nil {
		return nil
	}
	return o.Notifications
}

func (o *Configuration) GetOwnerOrgID() string {
	if o == nil {
		return ""
	}
	return o.OwnerOrgID
}

func (o *Configuration) GetPending() *bool {
	if o == nil {
		return nil
	}
	return o.Pending
}

func (o *Configuration) GetPricing() *ConfigurationPricing {
	if o == nil {
		return nil
	}
	return o.Pricing
}

func (o *Configuration) GetPublic() *bool {
	if o == nil {
		return nil
	}
	return o.Public
}

func (o *Configuration) GetPublicVersions() []string {
	if o == nil {
		return nil
	}
	return o.PublicVersions
}

func (o *Configuration) GetReviewStatus() *ReviewStatus {
	if o == nil {
		return nil
	}
	return o.ReviewStatus
}

func (o *Configuration) GetRole() *Role {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *Configuration) GetSupportEmail() *string {
	if o == nil {
		return nil
	}
	return o.SupportEmail
}

func (o *Configuration) GetVersion() string {
	if o == nil {
		return ""
	}
	return o.Version
}

func (o *Configuration) GetVersionAudit() VersionAudit {
	if o == nil {
		return VersionAudit{}
	}
	return o.VersionAudit
}

func (o *Configuration) GetVersions() []string {
	if o == nil {
		return []string{}
	}
	return o.Versions
}
