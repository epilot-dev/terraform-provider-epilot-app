// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/internal/utils"
)

type EventType string

const (
	EventTypeError   EventType = "ERROR"
	EventTypeWarning EventType = "WARNING"
	EventTypeInfo    EventType = "INFO"
)

func (e EventType) ToPointer() *EventType {
	return &e
}
func (e *EventType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ERROR":
		fallthrough
	case "WARNING":
		fallthrough
	case "INFO":
		*e = EventType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventType: %v", v)
	}
}

type AppEventDataInput struct {
	// ID of the app configuration
	AppID         string  `json:"app_id"`
	ComponentID   string  `json:"component_id"`
	CorrelationID *string `json:"correlation_id,omitempty"`
	// Details about the event
	Details   map[string]any `json:"details,omitempty"`
	EventType EventType      `json:"event_type"`
	// Type of app component
	Source ComponentType `json:"source"`
	// Version of the app configuration
	Version string `json:"version"`
}

func (a AppEventDataInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppEventDataInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"app_id", "component_id", "event_type", "source", "version"}); err != nil {
		return err
	}
	return nil
}

func (o *AppEventDataInput) GetAppID() string {
	if o == nil {
		return ""
	}
	return o.AppID
}

func (o *AppEventDataInput) GetComponentID() string {
	if o == nil {
		return ""
	}
	return o.ComponentID
}

func (o *AppEventDataInput) GetCorrelationID() *string {
	if o == nil {
		return nil
	}
	return o.CorrelationID
}

func (o *AppEventDataInput) GetDetails() map[string]any {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *AppEventDataInput) GetEventType() EventType {
	if o == nil {
		return EventType("")
	}
	return o.EventType
}

func (o *AppEventDataInput) GetSource() ComponentType {
	if o == nil {
		return ComponentType("")
	}
	return o.Source
}

func (o *AppEventDataInput) GetVersion() string {
	if o == nil {
		return ""
	}
	return o.Version
}

type AppEventData struct {
	Actor Actor `json:"actor"`
	// ID of the app configuration
	AppID         string  `json:"app_id"`
	ComponentID   string  `json:"component_id"`
	CorrelationID *string `json:"correlation_id,omitempty"`
	// Details about the event
	Details   map[string]any `json:"details,omitempty"`
	EventID   *string        `json:"event_id,omitempty"`
	EventType EventType      `json:"event_type"`
	// Type of app component
	Source    ComponentType `json:"source"`
	Timestamp *string       `json:"timestamp,omitempty"`
	// Version of the app configuration
	Version string `json:"version"`
}

func (a AppEventData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppEventData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"actor", "app_id", "component_id", "event_type", "source", "version"}); err != nil {
		return err
	}
	return nil
}

func (o *AppEventData) GetActor() Actor {
	if o == nil {
		return Actor{}
	}
	return o.Actor
}

func (o *AppEventData) GetAppID() string {
	if o == nil {
		return ""
	}
	return o.AppID
}

func (o *AppEventData) GetComponentID() string {
	if o == nil {
		return ""
	}
	return o.ComponentID
}

func (o *AppEventData) GetCorrelationID() *string {
	if o == nil {
		return nil
	}
	return o.CorrelationID
}

func (o *AppEventData) GetDetails() map[string]any {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *AppEventData) GetEventID() *string {
	if o == nil {
		return nil
	}
	return o.EventID
}

func (o *AppEventData) GetEventType() EventType {
	if o == nil {
		return EventType("")
	}
	return o.EventType
}

func (o *AppEventData) GetSource() ComponentType {
	if o == nil {
		return ComponentType("")
	}
	return o.Source
}

func (o *AppEventData) GetTimestamp() *string {
	if o == nil {
		return nil
	}
	return o.Timestamp
}

func (o *AppEventData) GetVersion() string {
	if o == nil {
		return ""
	}
	return o.Version
}
