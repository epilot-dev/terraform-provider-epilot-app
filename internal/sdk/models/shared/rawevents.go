// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RawEventsType string

const (
	RawEventsTypeRaw RawEventsType = "raw"
)

func (e RawEventsType) ToPointer() *RawEventsType {
	return &e
}
func (e *RawEventsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "raw":
		*e = RawEventsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RawEventsType: %v", v)
	}
}

type RawEvents struct {
	Events []AppEventData `json:"events,omitempty"`
	Type   *RawEventsType `json:"type,omitempty"`
}

func (o *RawEvents) GetEvents() []AppEventData {
	if o == nil {
		return nil
	}
	return o.Events
}

func (o *RawEvents) GetType() *RawEventsType {
	if o == nil {
		return nil
	}
	return o.Type
}
