// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/internal/utils"
)

// ConfigurationMetadataConfigurationAudit - Audit information for the app
type ConfigurationMetadataConfigurationAudit struct {
	// Timestamp of the creation
	CreatedAt *string `json:"created_at,omitempty"`
	// User ID of the creator
	CreatedBy *string `json:"created_by,omitempty"`
	// Timestamp of the last update
	UpdatedAt *string `json:"updated_at,omitempty"`
	// User ID of the last updater
	UpdatedBy *string `json:"updated_by,omitempty"`
}

func (o *ConfigurationMetadataConfigurationAudit) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ConfigurationMetadataConfigurationAudit) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *ConfigurationMetadataConfigurationAudit) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ConfigurationMetadataConfigurationAudit) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

// ConfigurationMetadataDescription - Markdown description of the app.
type ConfigurationMetadataDescription struct {
	// German translation
	De string `json:"de"`
	// English translation
	En *string `json:"en,omitempty"`
}

func (o *ConfigurationMetadataDescription) GetDe() string {
	if o == nil {
		return ""
	}
	return o.De
}

func (o *ConfigurationMetadataDescription) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

// ConfigurationMetadataNotifications - Configuration for developer notifications
type ConfigurationMetadataNotifications struct {
	// Email address to receive notifications
	Email *string `json:"email,omitempty"`
	// List of events to subscribe to
	Events []NotificationEvent `json:"events,omitempty"`
}

func (o *ConfigurationMetadataNotifications) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ConfigurationMetadataNotifications) GetEvents() []NotificationEvent {
	if o == nil {
		return nil
	}
	return o.Events
}

type ConfigurationMetadataPricingType string

const (
	ConfigurationMetadataPricingTypeFree         ConfigurationMetadataPricingType = "FREE"
	ConfigurationMetadataPricingTypeSubscription ConfigurationMetadataPricingType = "SUBSCRIPTION"
	ConfigurationMetadataPricingTypeUsageBased   ConfigurationMetadataPricingType = "USAGE_BASED"
	ConfigurationMetadataPricingTypeOneTime      ConfigurationMetadataPricingType = "ONE_TIME"
	ConfigurationMetadataPricingTypeCustom       ConfigurationMetadataPricingType = "CUSTOM"
	ConfigurationMetadataPricingTypeUnknown      ConfigurationMetadataPricingType = "UNKNOWN"
)

func (e ConfigurationMetadataPricingType) ToPointer() *ConfigurationMetadataPricingType {
	return &e
}
func (e *ConfigurationMetadataPricingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "USAGE_BASED":
		fallthrough
	case "ONE_TIME":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "UNKNOWN":
		*e = ConfigurationMetadataPricingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigurationMetadataPricingType: %v", v)
	}
}

// ConfigurationMetadataPricing - Pricing information for the app
type ConfigurationMetadataPricing struct {
	// How often the subscription is billed
	BillingFrequency *BillingFrequency                 `json:"billing_frequency,omitempty"`
	PricingType      *ConfigurationMetadataPricingType `json:"pricing_type,omitempty"`
}

func (o *ConfigurationMetadataPricing) GetBillingFrequency() *BillingFrequency {
	if o == nil {
		return nil
	}
	return o.BillingFrequency
}

func (o *ConfigurationMetadataPricing) GetPricingType() *ConfigurationMetadataPricingType {
	if o == nil {
		return nil
	}
	return o.PricingType
}

// ConfigurationMetadata - Basic metadata about your app configuration which does not get versioned
type ConfigurationMetadata struct {
	AppID  string  `json:"app_id"`
	Author *Author `json:"author,omitempty"`
	// Category of the app.
	Category           *string                                  `json:"category,omitempty"`
	ConfigurationAudit *ConfigurationMetadataConfigurationAudit `json:"configuration_audit,omitempty"`
	Description        ConfigurationMetadataDescription         `json:"description"`
	// Flag to indicate if the app is in dev mode. If true, the app takes the override_url property of components into account.
	DevMode *bool `json:"dev_mode,omitempty"`
	// URL of the app documentation.
	DocumentationURL *string `json:"documentation_url,omitempty"`
	// URL of the app icon.
	IconURL *string `json:"icon_url,omitempty"`
	// Flag to indicate if the app is built by epilot.
	Internal *bool `default:"false" json:"internal"`
	// Latest version of the app
	LatestVersion string `json:"latest_version"`
	// Name of the app
	Name          string                              `json:"name"`
	Notifications *ConfigurationMetadataNotifications `json:"notifications,omitempty"`
	// Organization ID of the app owner, required for private apps or sandbox accounts
	OwnerOrgID string                        `json:"owner_org_id"`
	Pricing    *ConfigurationMetadataPricing `json:"pricing,omitempty"`
	// List of available public versions of the app
	PublicVersions []string `json:"public_versions,omitempty"`
	// Email address for support requests
	SupportEmail *string `json:"support_email,omitempty"`
	// List of available versions of the app
	Versions []string `json:"versions"`
}

func (c ConfigurationMetadata) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConfigurationMetadata) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"app_id", "description", "latest_version", "name", "owner_org_id", "versions"}); err != nil {
		return err
	}
	return nil
}

func (o *ConfigurationMetadata) GetAppID() string {
	if o == nil {
		return ""
	}
	return o.AppID
}

func (o *ConfigurationMetadata) GetAuthor() *Author {
	if o == nil {
		return nil
	}
	return o.Author
}

func (o *ConfigurationMetadata) GetCategory() *string {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *ConfigurationMetadata) GetConfigurationAudit() *ConfigurationMetadataConfigurationAudit {
	if o == nil {
		return nil
	}
	return o.ConfigurationAudit
}

func (o *ConfigurationMetadata) GetDescription() ConfigurationMetadataDescription {
	if o == nil {
		return ConfigurationMetadataDescription{}
	}
	return o.Description
}

func (o *ConfigurationMetadata) GetDevMode() *bool {
	if o == nil {
		return nil
	}
	return o.DevMode
}

func (o *ConfigurationMetadata) GetDocumentationURL() *string {
	if o == nil {
		return nil
	}
	return o.DocumentationURL
}

func (o *ConfigurationMetadata) GetIconURL() *string {
	if o == nil {
		return nil
	}
	return o.IconURL
}

func (o *ConfigurationMetadata) GetInternal() *bool {
	if o == nil {
		return nil
	}
	return o.Internal
}

func (o *ConfigurationMetadata) GetLatestVersion() string {
	if o == nil {
		return ""
	}
	return o.LatestVersion
}

func (o *ConfigurationMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ConfigurationMetadata) GetNotifications() *ConfigurationMetadataNotifications {
	if o == nil {
		return nil
	}
	return o.Notifications
}

func (o *ConfigurationMetadata) GetOwnerOrgID() string {
	if o == nil {
		return ""
	}
	return o.OwnerOrgID
}

func (o *ConfigurationMetadata) GetPricing() *ConfigurationMetadataPricing {
	if o == nil {
		return nil
	}
	return o.Pricing
}

func (o *ConfigurationMetadata) GetPublicVersions() []string {
	if o == nil {
		return nil
	}
	return o.PublicVersions
}

func (o *ConfigurationMetadata) GetSupportEmail() *string {
	if o == nil {
		return nil
	}
	return o.SupportEmail
}

func (o *ConfigurationMetadata) GetVersions() []string {
	if o == nil {
		return []string{}
	}
	return o.Versions
}
