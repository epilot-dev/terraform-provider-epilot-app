// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-app/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/validators"
	speakeasy_listvalidators "github.com/epilot-dev/terraform-provider-epilot-app/internal/validators/listvalidators"
	speakeasy_objectvalidators "github.com/epilot-dev/terraform-provider-epilot-app/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/epilot-dev/terraform-provider-epilot-app/internal/validators/stringvalidators"
	"github.com/hashicorp/terraform-plugin-framework-validators/boolvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/numbervalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &AppResource{}
var _ resource.ResourceWithImportState = &AppResource{}

func NewAppResource() resource.Resource {
	return &AppResource{}
}

// AppResource defines the resource implementation.
type AppResource struct {
	client *sdk.SDK
}

// AppResourceModel describes the resource data model.
type AppResourceModel struct {
	AppID             types.String               `tfsdk:"app_id"`
	BlueprintRef      *tfTypes.BlueprintRef      `tfsdk:"blueprint_ref"`
	Components        types.String               `tfsdk:"components"`
	Enabled           types.Bool                 `tfsdk:"enabled"`
	InstallationAudit *tfTypes.InstallationAudit `tfsdk:"installation_audit"`
	InstalledVersion  types.String               `tfsdk:"installed_version"`
	InstallerOrgID    types.String               `tfsdk:"installer_org_id"`
	Manifest          []types.String             `tfsdk:"manifest"`
	Name              types.String               `tfsdk:"name"`
	OptionValues      []tfTypes.OptionsRef       `tfsdk:"option_values"`
	OwnerOrgID        types.String               `tfsdk:"owner_org_id"`
	Role              types.String               `tfsdk:"role"`
	Version           types.String               `tfsdk:"version"`
}

func (r *AppResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_app"
}

func (r *AppResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "App Resource",
		Attributes: map[string]schema.Attribute{
			"app_id": schema.StringAttribute{
				Required: true,
			},
			"blueprint_ref": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"job_id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the job that created the blueprint`,
					},
					"manifest_id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the blueprint`,
					},
				},
			},
			"components": schema.StringAttribute{
				Computed:    true,
				Description: `List of component configurations for the installed version. Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Default:     booldefault.StaticBool(true),
				Description: `Flag to indicate if the app is enabled. Enabled is set to true when required option values are set. Default: true`,
			},
			"installation_audit": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"created_at": schema.StringAttribute{
						Computed:    true,
						Description: `Timestamp of the creation`,
					},
					"created_by": schema.StringAttribute{
						Computed:    true,
						Description: `User ID of the creator`,
					},
					"updated_at": schema.StringAttribute{
						Computed:    true,
						Description: `Timestamp of the last update`,
					},
					"updated_by": schema.StringAttribute{
						Computed:    true,
						Description: `User ID of the last updater`,
					},
				},
				Description: `Audit information for the app`,
			},
			"installed_version": schema.StringAttribute{
				Computed:    true,
				Description: `Version of the app that is installed`,
			},
			"installer_org_id": schema.StringAttribute{
				Computed:    true,
				Description: `Unique identifier for the organization the app is installed in`,
			},
			"manifest": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `Manifest ID used to create/update the entity`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `Name of the app`,
			},
			"option_values": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"component_id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `ID of the component these values are for. Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"options": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
								Attributes: map[string]schema.Attribute{
									"key": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `Key matching a config_option from the component. Not Null`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"value": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"boolean": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.Bool{
													boolvalidator.ConflictsWith(path.Expressions{
														path.MatchRelative().AtParent().AtName("str"),
														path.MatchRelative().AtParent().AtName("number"),
													}...),
												},
											},
											"number": schema.NumberAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.Number{
													numbervalidator.ConflictsWith(path.Expressions{
														path.MatchRelative().AtParent().AtName("str"),
														path.MatchRelative().AtParent().AtName("boolean"),
													}...),
												},
											},
											"str": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.ConflictsWith(path.Expressions{
														path.MatchRelative().AtParent().AtName("boolean"),
														path.MatchRelative().AtParent().AtName("number"),
													}...),
												},
											},
										},
										Description: `The configured value for this option. Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
								},
							},
							Description: `Not Null`,
							Validators: []validator.List{
								speakeasy_listvalidators.NotNull(),
							},
						},
					},
				},
				Description: `Configuration values for the app components`,
			},
			"owner_org_id": schema.StringAttribute{
				Computed:    true,
				Description: `Organization ID of the app creator`,
			},
			"role": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the role the app can use to access APIs`,
			},
			"version": schema.StringAttribute{
				Optional:    true,
				Description: `Version of the app to update to`,
			},
		},
	}
}

func (r *AppResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AppResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *AppResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	installRequest := data.ToSharedInstallRequest()
	var appID string
	appID = data.AppID.ValueString()

	request := operations.InstallRequest{
		InstallRequest: installRequest,
		AppID:          appID,
	}
	res, err := r.client.AppInstallation.Install(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Installation != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedInstallation(res.Installation)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var appId1 string
	appId1 = data.AppID.ValueString()

	request1 := operations.GetInstallationRequest{
		AppID: appId1,
	}
	res1, err := r.client.AppInstallation.GetInstallation(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Installation != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedInstallation(res1.Installation)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AppResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *AppResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var appID string
	appID = data.AppID.ValueString()

	request := operations.GetInstallationRequest{
		AppID: appID,
	}
	res, err := r.client.AppInstallation.GetInstallation(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Installation != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedInstallation(res.Installation)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AppResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *AppResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	installRequest := data.ToSharedInstallRequest()
	var appID string
	appID = data.AppID.ValueString()

	request := operations.PatchInstallationRequest{
		InstallRequest: installRequest,
		AppID:          appID,
	}
	res, err := r.client.AppInstallation.PatchInstallation(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var appId1 string
	appId1 = data.AppID.ValueString()

	request1 := operations.GetInstallationRequest{
		AppID: appId1,
	}
	res1, err := r.client.AppInstallation.GetInstallation(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Installation != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedInstallation(res1.Installation)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AppResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *AppResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var appID string
	appID = data.AppID.ValueString()

	request := operations.UninstallRequest{
		AppID: appID,
	}
	res, err := r.client.AppInstallation.Uninstall(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *AppResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("app_id"), req.ID)...)
}
