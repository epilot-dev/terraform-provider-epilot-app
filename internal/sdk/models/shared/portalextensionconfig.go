// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/internal/utils"
)

type Call struct {
	Headers map[string]string `json:"headers,omitempty"`
	Params  map[string]string `json:"params,omitempty"`
	URL     *string           `json:"url,omitempty"`
}

func (c Call) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Call) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *Call) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *Call) GetParams() map[string]string {
	if o == nil {
		return nil
	}
	return o.Params
}

func (o *Call) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type Hooks struct {
	Auth     *PortalAuth       `json:"auth,omitempty"`
	Call     *Call             `json:"call,omitempty"`
	ID       *string           `json:"id,omitempty"`
	Interval []string          `json:"interval,omitempty"`
	Name     *TranslatedString `json:"name,omitempty"`
	Type     *string           `json:"type,omitempty"`
}

func (h Hooks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *Hooks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *Hooks) GetAuth() *PortalAuth {
	if o == nil {
		return nil
	}
	return o.Auth
}

func (o *Hooks) GetCall() *Call {
	if o == nil {
		return nil
	}
	return o.Call
}

func (o *Hooks) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Hooks) GetInterval() []string {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *Hooks) GetName() *TranslatedString {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Hooks) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type Redirect struct {
	Params map[string]string `json:"params,omitempty"`
	URL    *string           `json:"url,omitempty"`
}

func (r Redirect) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Redirect) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *Redirect) GetParams() map[string]string {
	if o == nil {
		return nil
	}
	return o.Params
}

func (o *Redirect) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type Links struct {
	Auth        *PortalAuth       `json:"auth,omitempty"`
	Condition   *string           `json:"condition,omitempty"`
	Description *TranslatedString `json:"description,omitempty"`
	ID          *string           `json:"id,omitempty"`
	Name        *TranslatedString `json:"name,omitempty"`
	Redirect    *Redirect         `json:"redirect,omitempty"`
	Type        *string           `json:"type,omitempty"`
}

func (l Links) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *Links) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *Links) GetAuth() *PortalAuth {
	if o == nil {
		return nil
	}
	return o.Auth
}

func (o *Links) GetCondition() *string {
	if o == nil {
		return nil
	}
	return o.Condition
}

func (o *Links) GetDescription() *TranslatedString {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Links) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Links) GetName() *TranslatedString {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Links) GetRedirect() *Redirect {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *Links) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type PortalExtensionConfig struct {
	Hooks []Hooks `json:"hooks,omitempty"`
	ID    *string `json:"id,omitempty"`
	Links []Links `json:"links,omitempty"`
}

func (p PortalExtensionConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PortalExtensionConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *PortalExtensionConfig) GetHooks() []Hooks {
	if o == nil {
		return nil
	}
	return o.Hooks
}

func (o *PortalExtensionConfig) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PortalExtensionConfig) GetLinks() []Links {
	if o == nil {
		return nil
	}
	return o.Links
}
