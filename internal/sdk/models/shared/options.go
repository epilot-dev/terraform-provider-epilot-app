// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-app/internal/sdk/internal/utils"
)

type OptionsType string

const (
	OptionsTypeText    OptionsType = "text"
	OptionsTypeNumber  OptionsType = "number"
	OptionsTypeBoolean OptionsType = "boolean"
	OptionsTypeSecret  OptionsType = "secret"
)

func (e OptionsType) ToPointer() *OptionsType {
	return &e
}
func (e *OptionsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		fallthrough
	case "number":
		fallthrough
	case "boolean":
		fallthrough
	case "secret":
		*e = OptionsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OptionsType: %v", v)
	}
}

type OptionsValueType string

const (
	OptionsValueTypeStr     OptionsValueType = "str"
	OptionsValueTypeBoolean OptionsValueType = "boolean"
	OptionsValueTypeNumber  OptionsValueType = "number"
)

type OptionsValue struct {
	Str     *string  `queryParam:"inline" name:"value"`
	Boolean *bool    `queryParam:"inline" name:"value"`
	Number  *float64 `queryParam:"inline" name:"value"`

	Type OptionsValueType
}

func CreateOptionsValueStr(str string) OptionsValue {
	typ := OptionsValueTypeStr

	return OptionsValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateOptionsValueBoolean(boolean bool) OptionsValue {
	typ := OptionsValueTypeBoolean

	return OptionsValue{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateOptionsValueNumber(number float64) OptionsValue {
	typ := OptionsValueTypeNumber

	return OptionsValue{
		Number: &number,
		Type:   typ,
	}
}

func (u *OptionsValue) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = OptionsValueTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = OptionsValueTypeBoolean
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = OptionsValueTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OptionsValue", string(data))
}

func (u OptionsValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type OptionsValue: all fields are null")
}

// Options for the component configuration
type Options struct {
	// Detailed description of what this configuration option does
	Description *string `json:"description,omitempty"`
	// Unique identifier for this configuration option
	Key string `json:"key"`
	// Human-readable label for the configuration option
	Label *string `json:"label,omitempty"`
	// Flag to indicate if this option is required
	Required *bool       `json:"required,omitempty"`
	Type     OptionsType `json:"type"`
	// The configured value for this option. Is only present when the component is installed.
	Value *OptionsValue `json:"value,omitempty"`
}

func (o Options) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *Options) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, []string{"key", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *Options) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Options) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *Options) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *Options) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *Options) GetType() OptionsType {
	if o == nil {
		return OptionsType("")
	}
	return o.Type
}

func (o *Options) GetValue() *OptionsValue {
	if o == nil {
		return nil
	}
	return o.Value
}
