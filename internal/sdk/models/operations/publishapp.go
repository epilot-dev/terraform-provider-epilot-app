// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type Status string

const (
	StatusPending   Status = "pending"
	StatusPublished Status = "published"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "published":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

// PublishAppResponseBody - App publication process started
type PublishAppResponseBody struct {
	AppID string `json:"app_id"`
	// Step Function execution ARN for status tracking
	ExecutionArn *string `json:"execution_arn,omitempty"`
	Status       Status  `json:"status"`
}

func (o *PublishAppResponseBody) GetAppID() string {
	if o == nil {
		return ""
	}
	return o.AppID
}

func (o *PublishAppResponseBody) GetExecutionArn() *string {
	if o == nil {
		return nil
	}
	return o.ExecutionArn
}

func (o *PublishAppResponseBody) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}

type PublishAppResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// App publication process started
	Object *PublishAppResponseBody
}

func (o *PublishAppResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PublishAppResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PublishAppResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PublishAppResponse) GetObject() *PublishAppResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
