// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CloneVersionRequest struct {
	// ID of the app configuration
	AppID string `pathParam:"style=simple,explode=false,name=appId"`
	// Source version to clone from
	SourceVersion string `pathParam:"style=simple,explode=false,name=sourceVersion"`
	// Target version to create
	TargetVersion string `pathParam:"style=simple,explode=false,name=targetVersion"`
}

func (o *CloneVersionRequest) GetAppID() string {
	if o == nil {
		return ""
	}
	return o.AppID
}

func (o *CloneVersionRequest) GetSourceVersion() string {
	if o == nil {
		return ""
	}
	return o.SourceVersion
}

func (o *CloneVersionRequest) GetTargetVersion() string {
	if o == nil {
		return ""
	}
	return o.TargetVersion
}

type Status string

const (
	StatusPending   Status = "pending"
	StatusPublished Status = "published"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "published":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

// CloneVersionResponseBody - New version created successfully
type CloneVersionResponseBody struct {
	AppID   *string `json:"app_id,omitempty"`
	Status  *Status `json:"status,omitempty"`
	Version *string `json:"version,omitempty"`
}

func (o *CloneVersionResponseBody) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

func (o *CloneVersionResponseBody) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CloneVersionResponseBody) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

type CloneVersionResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// New version created successfully
	Object *CloneVersionResponseBody
}

func (o *CloneVersionResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CloneVersionResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CloneVersionResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CloneVersionResponse) GetObject() *CloneVersionResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
